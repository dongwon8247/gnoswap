package router

import (
	"encoding/gjson"
	"std"
	"testing"

	_ "gno.land/r/demo/grc20_wrapper"
	pl "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"

	wugnot "gno.land/r/demo/wugnot"
)

func TestInitManual(t *testing.T) {
	std.TestSetOrigCaller(test1)
	pl.InitManual()
	std.TestSkipHeights(1)
}

func TestCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)

	pl.CreatePool(gnsPath, wgnotPath, fee100, 130621891405341611593710811006) // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(wgnotPath, barPath, fee100, 130621891405341611593710811006) // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// 1 gns â‰ˆ 7.29 bar

	jsonOutput := pl.ApiGetPools()
	jsonStr := gjson.Parse(jsonOutput)
	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 2)
}

func TestPositionMintGnsGnot(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// send
	std.TestSetOrigSend(std.Coins{{"ugnot", 99999}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 99999)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	tokenId, liquidity, amount0, amount1 := pos.Mint(gnsPath, wgnotPath, fee100, int32(9000), int32(11000), bigint(100_000), bigint(100_000), 0, 0, max_timeout)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0 > 0, true) // 36789
	shouldEQ(t, amount1 > 0, true) // 99999
}

func TestPositionMintGnotBar(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// send
	std.TestSetOrigSend(std.Coins{{"ugnot", 99999}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 99999)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	tokenId, liquidity, amount0, amount1 := pos.Mint(wgnotPath, barPath, fee100, int32(9000), int32(11000), bigint(100_000), bigint(100_000), 0, 0, max_timeout)
	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, amount0 > 0, true) // 99999
	shouldEQ(t, amount1 > 0, true) // 36865
}

func TestDrySwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		gnsPath,      // inputToken
		barPath,      // outputToken
		bigint(1000), // amountSpecified
		"EXACT_IN",   // swapType
		"gno.land/r/demo/gns:gno.land/r/demo/wugnot:100*POOL*gno.land/r/demo/wugnot:gno.land/r/demo/bar:100", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, bigint(7339))
}

func TestSwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	std.TestSetOrigSend(std.Coins{{"", 0}}, nil)
	swapResult := SwapRoute(
		gnsPath,      // inputToken
		barPath,      // outputToken
		bigint(1000), // amountSpecified
		"EXACT_IN",   // swapType
		"gno.land/r/demo/gns:gno.land/r/demo/wugnot:100*POOL*gno.land/r/demo/wugnot:gno.land/r/demo/bar:100", // strRouteArr
		"100", // quoteArr
		"0",   // tokenAmountLimit
	)
	shouldEQ(t, swapResult, bigint(7339))
}
