// gno test -root-dir ~/gno -verbose=true ./gno.land/r/router -print-runtime-metrics=true
package router

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/grc20_wrapper"
	p "gno.land/r/pool"
	pos "gno.land/r/position"
)

var (
	pc01 = testutils.TestAddress("pc01") // Pool Creator 01
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	lp02 = testutils.TestAddress("lp02") // Liquidity Provider 02
	lp03 = testutils.TestAddress("lp03") // Liquidity Provider 03
	tr01 = testutils.TestAddress("tr01") // Trader 01

	poolAddr   = std.DerivePkgAddr("gno.land/r/pool")
	posAddr    = std.DerivePkgAddr("gno.land/r/position")
	routerAddr = std.DerivePkgAddr("gno.land/r/router")
)

var (
	// Common
	barPath = "gno.land/r/bar"
	bazPath = "gno.land/r/baz"
	fooPath = "gno.land/r/foo"
	quxPath = "gno.land/r/qux"

	max_timeout = bigint(9999999999)
)

// func init() {
// 	println(pc01, "// pc01")
// 	println(lp01, "// lp01")
// 	println(tr01, "// tr01")
// 	println(poolAddr, "// poolAddr")
// 	println(posAddr, "// posAddr")
// 	println(routerAddr, "// routerAddr")
// }

func TestInitManual(t *testing.T) {
	std.TestSetOrigCaller(pc01)
	p.InitManual()
	std.TestSkipHeights(1)
}

func TestCreatePool(t *testing.T) {
	std.TestSetOrigCaller(pc01)
	p.CreatePool(barPath, bazPath, uint16(100), 130621891405341611593710811006) // tick = 10000, ratio = x2.71814592682522526700950038502924144268035888671875
}

const MaxMintAmount = bigint(3_000_000)
const SwapAmount = bigint(1_100_000)

func TestPositionMint(t *testing.T) {
	{
		std.TestSetOrigCaller(lp01)
		tokenId, liquidity, amount0, amount1 := pos.Mint(barPath, bazPath, uint16(100), int32(9998), int32(10002), MaxMintAmount, MaxMintAmount, 0, 0, max_timeout)
		println("tokenId", tokenId)
		println("liquidity", liquidity)
		println("amount0", amount0)
		println("amount1", amount1)
		println()
	}

	{
		std.TestSetOrigCaller(lp02)
		tokenId, liquidity, amount0, amount1 := pos.Mint(barPath, bazPath, uint16(100), int32(9996), int32(9998), MaxMintAmount, MaxMintAmount, 0, 0, max_timeout)
		println("tokenId", tokenId)
		println("liquidity", liquidity)
		println("amount0", amount0)
		println("amount1", amount1)
		println()
	}

	{
		std.TestSetOrigCaller(lp03)
		tokenId, liquidity, amount0, amount1 := pos.Mint(barPath, bazPath, uint16(100), int32(10002), int32(10004), MaxMintAmount, MaxMintAmount, 0, 0, max_timeout)
		println("tokenId", tokenId)
		println("liquidity", liquidity)
		println("amount0", amount0)
		println("amount1", amount1)
		println()
	}
}

func TestDrySwapRouteExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)
	resultAmount := DrySwapRoute(
		barPath,                             // inputToken
		bazPath,                             // outputToken
		SwapAmount,                          // amountSpecified
		"EXACT_IN",                          // swapType
		"gno.land/r/bar:gno.land/r/baz:100", // strRouteArr
		"100",                               // quotes
	)
	println("DRY EXACT_IN RATIO x2.7181")
	println("swap\t\t", SwapAmount)
	// println("estimated\t", SwapAmount*27181/10000)
	println("result\t\t", resultAmount)
	println()
}

func TestActualSwapRouteExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)
	resultAmount := SwapRoute(
		barPath,                             // inputToken
		bazPath,                             // outputToken
		SwapAmount,                          // amountSpecified
		"EXACT_IN",                          // swapType
		"gno.land/r/bar:gno.land/r/baz:100", // strRouteArr
		"100",                               // quotes
		"1",                                 // minReceive
	)
	println("SWAP EXACT_IN RATIO x2.7181")
	println("swap\t\t", SwapAmount)
	// println("estimated\t", SwapAmount*27181/10000)
	println("result\t\t", resultAmount)
	println()
}

func TestActualSwapRouteExactOut(t *testing.T) {
	std.TestSetOrigCaller(tr01)
	resultAmount := SwapRoute(
		barPath,                             // inputToken
		bazPath,                             // outputToken
		bigint(12_000),                      // amountSpecified
		"EXACT_OUT",                         // swapType
		"gno.land/r/bar:gno.land/r/baz:100", // strRouteArr
		"100",                               // quotes
		"1234567890",                        // maxSpend
	)
	println("SWAP EXACT_IN RATIO x2.7181")
	println("swap\t\t", SwapAmount)
	// println("estimated\t", SwapAmount*3703/10000)
	println("result\t\t", resultAmount)
	println()
}

func TestActualSwapRouteExactOut2(t *testing.T) {
	std.TestSetOrigCaller(tr01)
	resultAmount := SwapRoute(
		barPath,                             // inputToken
		bazPath,                             // outputToken
		bigint(20_000),                      // amountSpecified
		"EXACT_OUT",                         // swapType
		"gno.land/r/bar:gno.land/r/baz:100", // strRouteArr
		"100",                               // quotes
		"1234567890",                        // maxSpend
	)
	println("SWAP EXACT_IN RATIO x2.7181")
	println("swap\t\t", SwapAmount)
	// println("estimated\t", SwapAmount*3703/10000)
	println("result\t\t", resultAmount)
	println()
}

func TestDrySwapRouteExactIn2(t *testing.T) {
	std.TestSetOrigCaller(tr01)
	resultAmount := DrySwapRoute(
		barPath,                             // inputToken
		bazPath,                             // outputToken
		bigint(1096500),                     // amountSpecified
		"EXACT_IN",                          // swapType
		"gno.land/r/bar:gno.land/r/baz:100", // strRouteArr
		"100",                               // quotes
	)
	println("DRY EXACT_IN RATIO x2.7181")
	println("swap\t\t", bigint(1096500))
	// println("estimated\t", bigint(1096500)*27181/10000)
	println("result\t\t", resultAmount)
	println()
}

func TestActualSwapRouteExactIn2(t *testing.T) {
	std.TestSetOrigCaller(tr01)
	resultAmount := SwapRoute(
		barPath,                             // inputToken
		bazPath,                             // outputToken
		bigint(1096500),                     // amountSpecified
		"EXACT_IN",                          // swapType
		"gno.land/r/bar:gno.land/r/baz:100", // strRouteArr
		"100",                               // quotes
		"1",                                 // minReceive
	)
	println("SWAP EXACT_IN RATIO x2.7181")
	println("swap\t\t", bigint(1096500))
	// println("estimated\t", bigint(1096500)*27181/10000)
	println("result\t\t", resultAmount)
	println()
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}
