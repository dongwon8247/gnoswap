package router

import (
	"std"
	"testing"

	"gno.land/r/demo/gnoswap/consts"

	pl "gno.land/r/demo/pool"
	pn "gno.land/r/demo/position"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"

	"gno.land/r/demo/gns"
)

func TestCreatePool(t *testing.T) {
	std.TestSetPrevAddr(test1)
	for i := 0; i < (5 * 1); i++ {
		gns.Faucet()
	}

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	pl.CreatePool(barPath, bazPath, fee500, "130621891405341611593710811006") // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875

	// jsonOutput := pl.ApiGetPools()
	// jsonStr := gjson.Parse(jsonOutput)
	// shouldEQ(t, len(jsonStr.Get("response").Array()), 1)
}

func TestPositionMint(t *testing.T) {
	// bar_baz_500 by test1
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), 36790)
	baz.Approve(a2u(consts.POOL_ADDR), 100000)

	// Mint
	tokenId, liquidity, amount0, amount1 := pn.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), "100000", "100000", "0", "0", max_timeout, test1.String())
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0, "36790")
	shouldEQ(t, amount1, "99999")
}

func TestDrySwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetPrevAddr(test1)

	dryResult := DrySwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500", // strRouteArr
		"100", // quoteArr
	)

	shouldEQ(t, dryResult, "2711")
}

func TestSwapRouteBarBazExactIn(t *testing.T) {
	std.TestSetPrevAddr(test1)

	bar.Approve(a2u(consts.POOL_ADDR), uint64(1000))
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // ITS FOR 0.15% fee

	amountIn, amountOut := SwapRoute(
		barPath,    // inputToken
		bazPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500", // strRouteArr
		"100",  // quoteArr
		"2700", // tokenAmountLimit
	)
	shouldEQ(t, amountIn, "1000")
	shouldEQ(t, amountOut, "-2707")
}

func TestDrySwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetPrevAddr(test1)

	dryResult := DrySwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500", // strRouteArr
		"100", // quoteArr
	)

	shouldEQ(t, dryResult, "370")
}

func TestSwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetPrevAddr(test1)

	bar.Approve(a2u(consts.POOL_ADDR), uint64(1000))
	baz.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // ITS FOR 0.15% fee

	amountIn, amountOut := SwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		"1000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500", // strRouteArr
		"100", // quoteArr
		"370", // tokenAmountLimit
	)

	shouldEQ(t, amountIn, "370")
	shouldEQ(t, amountOut, "-999")
}

func TestDrySwapRouteBazBarExactIn(t *testing.T) {
	std.TestSetPrevAddr(test1)

	dryResult := DrySwapRoute(
		bazPath,    // inputToken
		barPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)

	shouldEQ(t, dryResult, "368")
}

func TestSwapRouteBazBarExactIn(t *testing.T) {
	std.TestSetPrevAddr(test1)

	baz.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX)
	bar.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX) // ITS FOR 0.15% fee

	amountIn, amountOut := SwapRoute(
		bazPath,    // inputToken
		barPath,    // outputToken
		"1000",     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
		"360", // tokenAmountLimit
	)

	shouldEQ(t, amountIn, "1000")
	shouldEQ(t, amountOut, "-368")
}

func TestDrySwapRouteBazBarExactOut(t *testing.T) {
	std.TestSetPrevAddr(test1)

	dryResult := DrySwapRoute(
		bazPath,     // inputToken
		barPath,     // outputToken
		"3000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)

	shouldEQ(t, dryResult, "8169")
}

func TestSwapRouteBazBarExactOut(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.ROUTER_ADDR), consts.UINT64_MAX)

	amountIn, amountOut := SwapRoute(
		bazPath,     // inputToken
		barPath,     // outputToken
		"3000",      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100",  // quoteArr
		"8200", // tokenAmountLimit
	)

	shouldEQ(t, amountIn, "8169")
	shouldEQ(t, amountOut, "-2996")
}
