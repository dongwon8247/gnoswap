package router

import (
	"encoding/gjson"
	"std"
	"testing"

	_ "gno.land/r/demo/grc20_wrapper"
	pl "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"

	"gno.land/r/demo/wugnot"
)

func TestInitManual(t *testing.T) {
	std.TestSetOrigCaller(test1)
	pl.InitManual()
	std.TestSkipHeights(1)
}

func TestCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)

	pl.CreatePool(barPath, bazPath, fee500, 130621891405341611593710811006)   // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(bazPath, quxPath, fee500, 130621891405341611593710811006)   // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	pl.CreatePool(quxPath, wgnotPath, fee500, 130621891405341611593710811006) // tick =  10_000, ratio = 2.71814592682522526700950038502924144268035888671875
	// 1 bar â‰ˆ 19.683 gnot

	jsonOutput := pl.ApiGetPools()
	jsonStr := gjson.Parse(jsonOutput)
	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 3)
}

func TestPositionMintBarBaz(t *testing.T) {
	std.TestSetOrigCaller(test1)

	tokenId, liquidity, amount0, amount1 := pos.Mint(barPath, bazPath, fee500, int32(9000), int32(11000), bigint(100_000), bigint(100_000), 0, 0, max_timeout)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, amount0 > 0, true) // 36789 bar
	shouldEQ(t, amount1 > 0, true) // 99999 baz
}

func TestPositionMintBazQux(t *testing.T) {
	std.TestSetOrigCaller(test1)

	tokenId, liquidity, amount0, amount1 := pos.Mint(bazPath, quxPath, fee500, int32(9000), int32(11000), bigint(100_000), bigint(100_000), 0, 0, max_timeout)
	shouldEQ(t, tokenId, uint64(2))
	shouldEQ(t, amount0 > 0, true) // 36789 baz
	shouldEQ(t, amount1 > 0, true) // 99999 qux
}

func TestPositionMintQuxGnot(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// send
	std.TestSetOrigSend(std.Coins{{"ugnot", 99999}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 99999)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	tokenId, liquidity, amount0, amount1 := pos.Mint(quxPath, wgnotPath, fee500, int32(9000), int32(11000), bigint(100_000), bigint(100_000), 0, 0, max_timeout)
	shouldEQ(t, tokenId, uint64(3))
	shouldEQ(t, amount0 > 0, true) // 36789 qux
	shouldEQ(t, amount1 > 0, true) // 99999 gnot
}

func TestDrySwapRouteBarGnotExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		barPath,      // inputToken
		wgnotPath,    // outputToken
		bigint(1000), // amountSpecified
		"EXACT_IN",   // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, bigint(19740))
}

func TestDrySwapRouteBarGnotExactOut(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		barPath,       // inputToken
		wgnotPath,     // outputToken
		bigint(20000), // amountSpecified
		"EXACT_OUT",   // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/wugnot:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, bigint(1011))
}

func TestDrySwapRouteGnotBarExactIn(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		wgnotPath,    // intputToken
		barPath,      // outputToken
		bigint(5000), // amountSpecified
		"EXACT_IN",   // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, bigint(247))
}

func TestDrySwapRouteGnotBarExactOut(t *testing.T) {
	std.TestSetOrigCaller(test1)

	dryResult := DrySwapRoute(
		wgnotPath,   // intputToken
		barPath,     // outputToken
		bigint(100), // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/wugnot:gno.land/r/demo/qux:500*POOL*gno.land/r/demo/qux:gno.land/r/demo/baz:500*POOL*gno.land/r/demo/baz:gno.land/r/demo/bar:500", // strRouteArr
		"100", // quoteArr
	)
	shouldEQ(t, dryResult, bigint(2003))
}
