package pool

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/grc20_wrapper"

	g "gno.land/r/gov"
)

var (
	gsa  = testutils.TestAddress("gsa")  // Gnoswap Admin
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	pc01 = testutils.TestAddress("pc01") // Pool Creator 01
	tr01 = testutils.TestAddress("tr01") // Trader 01

	poolAddr = std.DerivePkgAddr("gno.land/r/pool")
	posAddr  = std.DerivePkgAddr("gno.land/r/position")
)

var (
	// Common
	fooPath = "gno.land/r/foo" // token1
	barPath = "gno.land/r/bar" // token2
	pFee    = uint16(500)

	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(1000)
)

// 1. Init & Create Pool by gsa
func TestCreatePool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	InitManual()
	std.TestSkipHeights(1)

	jsonStr := gjson.Parse(ApiGetPools())
	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 0)

	std.TestSetOrigCaller(pc01)
	CreatePool(fooPath, barPath, pFee, 130622891405341611593710811006)
	std.TestSkipHeights(1)
	// 130621891405341611593710811006 // 9999
	// 130622891405341611593710811006 // 10000
	// fee
	// 500		= 0.05% // USv3 default
	// 3000		= 0.3% // USv3 default
	// 10000	= 1% // USv3 default
	jsonStr = gjson.Parse(ApiGetPools())
	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 1)
	shouldEQ(t, jsonStr.Get("response.data").Array()[0].String(), "gno.land/r/bar:gno.land/r/foo:500")

	jsonStr = gjson.Parse(ApiGetPool("gno.land/r/bar:gno.land/r/foo:500"))
	shouldEQ(t, jsonStr.Get("response.data.liquidity").Int(), 0)
	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 0)

	// sqrtPrice
	// 130621891405341611593710811006 // tick = 10000
	shouldPanic(t, func() { CreatePool(fooPath, barPath, 500, 130621891405341611593710811006) })
	std.TestSkipHeights(1)
}

// Swap by tr01, Mint by lp01 ~ 02
func TestSwap(t *testing.T) {
	pool := GetPool(fooPath, barPath, pFee)

	// lp01 mint 9000 ~ 11000 tick range
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*100000)
	std.TestSkipHeights(1)

	jsonStr := gjson.Parse(ApiGetPools())
	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 1)
	shouldEQ(t, jsonStr.Get("response.data").Array()[0].String(), "gno.land/r/bar:gno.land/r/foo:500")

	jsonStr = gjson.Parse(ApiGetPool("gno.land/r/bar:gno.land/r/foo:500"))
	shouldEQ(t, jsonStr.Get("response.data.token0_balance").Int(), 2957550)
	shouldEQ(t, jsonStr.Get("response.data.token1_balance").Int(), 8041577)
	shouldEQ(t, jsonStr.Get("response.data.liquidity").Int(), 100000000)
	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 1)

	// SWAP
	std.TestSetOrigCaller(tr01)

	Swap(fooPath, barPath, pFee, tr01, true, bigint(150000), MIN_PRICE, std.GetOrigCaller())
	std.TestSkipHeights(1)

	// Swap(fooPath, barPath, pFee, tr01, true, bigint(1500000), MIN_PRICE, std.GetOrigCaller()) // two iteration // s0: 1_500_000 // s1: -3_626_984 // currentTick: 7668
	jsonStr = gjson.Parse(ApiGetPool("gno.land/r/bar:gno.land/r/foo:500"))
	shouldEQ(t, jsonStr.Get("response.data.token0_balance").Int(), 3107550)
	shouldEQ(t, jsonStr.Get("response.data.token1_balance").Int(), 7635058)
	shouldEQ(t, jsonStr.Get("response.data.liquidity").Int(), 100000000)
	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 1)

	Swap(fooPath, barPath, pFee, tr01, false, bigint(601851), MAX_PRICE, std.GetOrigCaller())
	std.TestSkipHeights(1)

	jsonStr = gjson.Parse(ApiGetPool("gno.land/r/bar:gno.land/r/foo:500"))
	shouldEQ(t, jsonStr.Get("response.data.token0_balance").Int(), 1496418)
	shouldEQ(t, jsonStr.Get("response.data.token1_balance").Int(), 8236909)
	shouldEQ(t, jsonStr.Get("response.data.liquidity").Int(), 100000000)
	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 1)

	// To collect fee without removing liquidity
	// burn 0 => collect
	std.TestSetOrigCaller(lp01)
	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, 0)
	std.TestSkipHeights(1)

	std.TestSetOrigCaller(lp01)
	Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 100000000, 100000000)
	std.TestSkipHeights(1)
	jsonStr = gjson.Parse(ApiGetPool("gno.land/r/bar:gno.land/r/foo:500"))
	shouldEQ(t, jsonStr.Get("response.data.token0_balance").Int(), 1496344)
	shouldEQ(t, jsonStr.Get("response.data.token1_balance").Int(), 8236609)
	shouldEQ(t, jsonStr.Get("response.data.liquidity").Int(), 100000000)
	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 1)
}

// GOV
func TestSubmitProposalParameterProtocolFees(t *testing.T) {
	// Init GOV Contract
	g.Init()

	id := SubmitProposalParameterProtocolFees(
		"protocol fee change",  // title
		"change protocol fees", // summary
		"",                     // metadata
		0,                      // initialDeposit

		8,  // newFee0
		10, // newFee1
	)
	shouldEQ(t, id, uint64(1))
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}
