package pool

import (
	"std"
	"testing"

	"gno.land/r/demo/wugnot"

	"gno.land/r/demo/consts"
)

var (
	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(1000)
)

// 1. Init & Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	InitManual()

	CreatePool(fooPath, consts.WRAPPED_WUGNOT, fee500, 130621891405341611593710811006) // x2.7

	shouldPanic(t, func() { CreatePool(fooPath, consts.WRAPPED_WUGNOT, fee500, 130621891405341611593710811006) })
}

// 2. Mint LP and Get GNFT
func TestMint(t *testing.T) {
	token0, token1 := fooPath, consts.WRAPPED_WUGNOT
	if token1 < token0 {
		token0, token1 = token1, token0
	}

	// simulate transfer & decrase
	std.TestSetOrigSend(std.Coins{{"ugnot", 804_031}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 804_031)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	// Mint
	std.TestSetPrevRealm(consts.POSITION_PATH)
	amount0, amount1 := Mint(
		fooPath,
		consts.WRAPPED_WUGNOT,
		fee500,
		consts.POSITION_ADDR,
		test_tickLower,
		test_tickUpper,
		bigint(10000000),
	)

	shouldEQ(t, amount0, bigint(295801))
	shouldEQ(t, amount1, bigint(804031))
}

func TestSwapBuyNative(t *testing.T) {
	pool := GetPool(fooPath, consts.WRAPPED_WUGNOT, fee500)

	test1OldT0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
	test1OldT1Bal := balanceOfByRegisterCall(pool.token1Path, test1)
	shouldEQ(t, test1OldT0Bal, 499999999704199) // foo
	shouldEQ(t, test1OldT1Bal, bigint(0))       // wugnot

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)
	amount0, amount1 := Swap(
		fooPath,               // token0
		consts.WRAPPED_WUGNOT, // token1
		fee500,
		test1,
		true,
		bigint(10000),
		consts.MIN_PRICE,
		std.GetOrigCaller(),
	)
	shouldEQ(t, amount0, bigint(10000))
	shouldEQ(t, amount1, bigint(-27123))

	test1NewT0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
	test1NewT1Bal := balanceOfByRegisterCall(pool.token1Path, test1)
	shouldEQ(t, test1NewT0Bal, 499999999694199) // - 10_000 // user sells 10_000
	shouldEQ(t, test1NewT1Bal, 27123)           // gets WGNOT
}

func TestSwapSellNative(t *testing.T) {
	pool := GetPool(fooPath, consts.WRAPPED_WUGNOT, fee500)

	test1OldT0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
	test1OldT1Bal := balanceOfByRegisterCall(pool.token1Path, test1)
	shouldEQ(t, test1OldT0Bal, 499999999694199)
	shouldEQ(t, test1OldT1Bal, 27123)

	// test1 has 27131 wugnot from previous swap
	std.TestSetOrigCaller(test1)

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	amount0, amount1 := Swap( // ugnot 10_000 > foo ??
		fooPath,               // token0
		consts.WRAPPED_WUGNOT, // token1
		fee500,
		test1,
		false,
		bigint(10000),
		consts.MAX_PRICE,
		std.GetOrigCaller(),
	)
	shouldEQ(t, amount0, bigint(-3687))
	shouldEQ(t, amount1, bigint(10000))

	test1NewT0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
	test1NewT1Bal := balanceOfByRegisterCall(pool.token1Path, test1)
	shouldEQ(t, test1NewT0Bal, 499999999697886) // foo
	shouldEQ(t, test1NewT1Bal, 17123)           // wugnot
}
