package pool

import (
	"std"
	"testing"

	"gno.land/r/demo/consts"
)

var (
	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(100_000_000)

	test_tickLower2 = int32(50000)
	test_tickUpper2 = int32(100000)
)

// 1. Init Pool
func TestInit(t *testing.T) {
	std.TestSetOrigCaller(test1)
	InitManual()
}

// 2. Create Foo:Bar Pool
func TestCreateFooBarPool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	CreatePool(fooPath, barPath, fee500, 130621891405341611593710811006)
	shouldEQ(t, len(pools), 1)
}

// 3. Create Bar:Baz Pool
func TestCreateBarBazPool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	CreatePool(barPath, bazPath, fee500, 130621891405341611593710811006)
	shouldEQ(t, len(pools), 2)
}

// 4. Mint Foo:Bar Liquidity by test1
func TestMintFooBarLiquidity(t *testing.T) {
	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)

	Mint(
		fooPath,
		barPath,
		fee500,
		consts.POSITION_ADDR,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpect,
	)
}

// 5. Mint Bar:Baz Liquidity by test1
func TestMintBarBazLiquidity(t *testing.T) {
	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)

	Mint(
		barPath,
		bazPath,
		fee500,
		consts.POSITION_ADDR,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpect,
	)
}

// 6. Swap Foo:Bar Foo > Bar by test1
func TestSwapFooBarFooToBar(t *testing.T) {
	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)

	oldtest1Token1Balance := balanceOfByRegisterCall(fooPath, test1)
	oldtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	oldPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	poolIn, poolOut := Swap(
		fooPath,
		barPath,
		fee500,
		test1,
		true,
		bigint(16000),
		consts.MIN_PRICE,
		std.GetOrigCaller(),
	)
	shouldEQ(t, poolIn, bigint(16000))
	shouldEQ(t, poolOut, bigint(-5882))

	newtest1Token1Balance := balanceOfByRegisterCall(fooPath, test1)
	newtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	newPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	shouldEQ(t, oldtest1Token0Balance-newtest1Token0Balance, 16000)
	shouldEQ(t, newtest1Token1Balance-oldtest1Token1Balance, 5882)
	shouldEQ(t, newPoolToken0Balance-oldPoolToken0Balance, 16000)
	shouldEQ(t, oldPoolToken1Balance-newPoolToken1Balance, 5882)
}

// 7. Swap Bar:Baz Bar > Baz by test1
func TestSwapBarBazBarToBaz(t *testing.T) {
	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)

	oldtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	oldtest1BazBalance := balanceOfByRegisterCall(bazPath, test1)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	poolIn, poolOut := Swap(
		barPath,
		bazPath,
		fee500,
		test1,
		true,
		bigint(16000),
		consts.MIN_PRICE,
		std.GetOrigCaller(),
	)
	shouldEQ(t, poolIn, bigint(16000))
	shouldEQ(t, poolOut, bigint(-43457))

	newtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	newtest1BazBalance := balanceOfByRegisterCall(bazPath, test1)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	shouldEQ(t, oldtest1Token0Balance-newtest1Token0Balance, 16000)
	shouldEQ(t, newtest1BazBalance-oldtest1BazBalance, 43457)
	shouldEQ(t, newPoolToken0Balance-oldPoolToken0Balance, 16000)
	shouldEQ(t, oldPoolBazBalance-newPoolBazBalance, 43457)
}

// 8. Collect Foo:Bar Fees by test1
func TestCollectFooBarFees(t *testing.T) {
	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)

	oldtest1Token1Balance := balanceOfByRegisterCall(fooPath, test1)
	oldtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	oldPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	// burn 0 to collect swap fees
	Burn(fooPath, barPath, fee500, -test_tickUpper, -test_tickLower, 0)

	c0, c1 := Collect(
		fooPath,
		barPath,
		fee500,
		test1,
		-test_tickUpper,
		-test_tickLower,
		100_000,
		100_000,
	)

	shouldNEQ(t, c0, bigint(0)) // swap was foo > bar, so only foo has fees
	shouldEQ(t, c1, bigint(0))  // swap was foo > bar, so bar has no fees

	newtest1Token1Balance := balanceOfByRegisterCall(fooPath, test1)
	newtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	newPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	shouldEQ(t, newtest1Token1Balance-oldtest1Token1Balance, uint64(c1))
	shouldEQ(t, newtest1Token0Balance-oldtest1Token0Balance, uint64(c0))
	shouldEQ(t, oldPoolToken1Balance-newPoolToken1Balance, uint64(c1))
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, uint64(c0))
}

// 9. Collect Bar:Baz Fees by test1
func TestCollectBarBazFees(t *testing.T) {
	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)

	oldtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	oldtest1BazBalance := balanceOfByRegisterCall(bazPath, test1)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	// burn 0 to collect swap fees
	Burn(barPath, bazPath, fee500, test_tickLower, test_tickUpper, 0)

	c0, c1 := Collect(
		barPath,
		bazPath,
		fee500,
		test1,
		test_tickLower,
		test_tickUpper,
		100_000,
		100_000,
	)

	shouldNEQ(t, c0, bigint(0)) // swap was foo > bar, so only foo has fees
	shouldEQ(t, c1, bigint(0))  // swap was foo > bar, so bar has no fees

	newtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	newtest1BazBalance := balanceOfByRegisterCall(bazPath, test1)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	shouldEQ(t, newtest1Token0Balance-oldtest1Token0Balance, uint64(c0))
	shouldEQ(t, newtest1BazBalance-oldtest1BazBalance, uint64(c1))
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, uint64(c0))
	shouldEQ(t, oldPoolBazBalance-newPoolBazBalance, uint64(c1))
}

// 10. Burn Foo:Bar Liquidity by test1
func TestBurnFooBarLiquidity(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSetPrevRealm(consts.POSITION_PATH)

	pool := GetPool(fooPath, barPath, fee500)
	poolOldLiquidity := pool.PoolGetLiquidity()

	b0, b1 := Burn(
		fooPath,
		barPath,
		fee500,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpect,
	)

	shouldNEQ(t, b0, bigint(0))
	shouldNEQ(t, b1, bigint(0))

	poolNewLiquidity := pool.PoolGetLiquidity()

	shouldEQ(t, poolOldLiquidity-poolNewLiquidity, test_liquidityExpect)
}

// 11. Burn Bar:Baz Liquidity by test1
func TestBurnBarBazLiquidity(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSetPrevRealm(consts.POSITION_PATH)

	pool := GetPool(barPath, bazPath, fee500)
	poolOldLiquidity := pool.PoolGetLiquidity()

	b0, b1 := Burn(
		barPath,
		bazPath,
		fee500,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpect,
	)

	shouldNEQ(t, b0, bigint(0))
	shouldNEQ(t, b1, bigint(0))

	poolNewLiquidity := pool.PoolGetLiquidity()

	shouldEQ(t, poolOldLiquidity-poolNewLiquidity, test_liquidityExpect)
}

// 12. Collect Foo:Bar burned Liquidity by test1
func TestCollectFooBarLiquidity(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSetPrevRealm(consts.POSITION_PATH)

	oldtest1Token1Balance := balanceOfByRegisterCall(fooPath, test1)
	oldtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	oldPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	c0, c1 := Collect(
		fooPath,
		barPath,
		fee500,
		test1,
		-test_tickUpper,
		-test_tickLower,
		100_000,
		100_000,
	)

	shouldNEQ(t, c0, bigint(0))
	shouldNEQ(t, c1, bigint(0))

	newtest1Token1Balance := balanceOfByRegisterCall(fooPath, test1)
	newtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	newPoolToken1Balance := balanceOfByRegisterCall(fooPath, consts.POOL_ADDR)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)

	shouldEQ(t, newtest1Token1Balance-oldtest1Token1Balance, uint64(c0))
	shouldEQ(t, newtest1Token0Balance-oldtest1Token0Balance, uint64(c1))
	shouldEQ(t, oldPoolToken1Balance-newPoolToken1Balance, uint64(c0))
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, uint64(c1))
}

// 13. Collect Bar:Baz burned Liquidity by test1
func TestCollectBarBazLiquidity(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSetPrevRealm(consts.POSITION_PATH)

	oldtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	oldtest1BazBalance := balanceOfByRegisterCall(bazPath, test1)
	oldPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	oldPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	c0, c1 := Collect(
		barPath,
		bazPath,
		fee500,
		test1,
		test_tickLower,
		test_tickUpper,
		100_000,
		100_000,
	)

	shouldNEQ(t, c0, bigint(0))
	shouldNEQ(t, c1, bigint(0))

	newtest1Token0Balance := balanceOfByRegisterCall(barPath, test1)
	newtest1BazBalance := balanceOfByRegisterCall(bazPath, test1)
	newPoolToken0Balance := balanceOfByRegisterCall(barPath, consts.POOL_ADDR)
	newPoolBazBalance := balanceOfByRegisterCall(bazPath, consts.POOL_ADDR)

	shouldEQ(t, newtest1Token0Balance-oldtest1Token0Balance, uint64(c0))
	shouldEQ(t, newtest1BazBalance-oldtest1BazBalance, uint64(c1))
	shouldEQ(t, oldPoolToken0Balance-newPoolToken0Balance, uint64(c0))
	shouldEQ(t, oldPoolBazBalance-newPoolBazBalance, uint64(c1))
}
