package pool

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/grc20_wrapper"
)

var (
	gsa  = testutils.TestAddress("gsa")  // Gnoswap Admin
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01

	poolAddr = std.DerivePkgAddr("gno.land/r/pool")
	posAddr  = std.DerivePkgAddr("gno.land/r/position")
)

var (
	// Common
	fooPath = "gno.land/r/foo" // token1
	barPath = "gno.land/r/bar" // token2
	bazPath = "gno.land/r/baz" // token3
	quxPath = "gno.land/r/qux" // token4
)

// 1. Init
func TestInitManual(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	InitManual()
	std.TestSkipHeights(1)
}

func TestCreatePool(t *testing.T) {
	CreatePool(fooPath, barPath, uint16(100), 130621891405341611593710811006) // tick = 10_000, ratio = 2.7181459268252253
	CreatePool(fooPath, barPath, uint16(500), 215353707227994575755767921544) // tick = 20_000, ratio = 7.388317279516561

	CreatePool(fooPath, quxPath, uint16(100), 130621891405341611593710811006) // tick = 10_000, ratio = 2.7181459268252253

	CreatePool(barPath, bazPath, uint16(100), 130621891405341611593710811006) // tick = 10_000, ratio = 2.7181459268252253
	CreatePool(barPath, quxPath, uint16(100), 130621891405341611593710811006) // tick = 10_000, ratio = 2.7181459268252253

	CreatePool(bazPath, quxPath, uint16(100), 130621891405341611593710811006) // tick = 10_000, ratio = 2.7181459268252253

	// std.TestSkipHeights(6)
	// shouldEQ(t, len(pools), 6)
}

func TestMintFooBar100(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	m0, m1 := Mint(
		fooPath,
		barPath,
		uint16(100),
		posAddr,
		int32(9000),
		int32(11000),
		bigint(100000000),
	)

	shouldEQ(t, m0, bigint(2958014))
	shouldEQ(t, m1, bigint(8040315))
}

func TestMintFooBar500(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	m0, m1 := Mint(
		fooPath,
		barPath,
		uint16(500),
		posAddr,
		int32(19000),
		int32(21000),
		bigint(100000000),
	)

	shouldEQ(t, m0, bigint(1794171))
	shouldEQ(t, m1, bigint(13255907))
}

func TestMintBarBaz100(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	m0, m1 := Mint(
		barPath,
		bazPath,
		uint16(100),
		posAddr,
		int32(9000),
		int32(11000),
		bigint(100000000),
	)

	shouldEQ(t, m0, bigint(2958014))
	shouldEQ(t, m1, bigint(8040315))
}

func TestFindAllPoolPath(t *testing.T) {
	// r3v4_xx: for now max hop is 3
	allPaths := FindAllPoolPath(fooPath, quxPath, 3)

	shouldEQ(t, len(allPaths), 5)
}

func TestFindBestPath(t *testing.T) {
	// for _, path := range allPaths {
	// 	println(path)
	// }

	// 	bestPoolPathDetail := FindBestPool(
	// 		fooPath, // tokenA
	// 		barPath,   // tokenB
	// 		true,    // zeroForOne
	// 		200,     // amountSpecified
	// 	)
	// 	jsonStr := gjson.Parse(bestPoolPathDetail)
	// 	shouldEQ(t, jsonStr.Get("response.data.pool_path").String(), foo_3000")

	// 	// should return empty if not enough balance
	// 	{
	// 		bestPoolPathDetail := FindBestPool(
	// 			fooPath, // tokenA
	// 			barPath,   // tokenB
	// 			true,    // zeroForOne
	// 			438,     // amountSpecified
	// 		)

	// 		jsonStr := gjson.Parse(bestPoolPathDetail)
	// 		shouldEQ(t, jsonStr.Get("response.data.pool_path").String(), "")
	// 	}
	// }

	// func TestFindBestPoolTrueNegative(t *testing.T) {
	// 	bestPoolPathDetail := FindBestPool(
	// 		fooPath, // tokenA
	// 		barPath,   // tokenB
	// 		true,    // zeroForOne
	// 		-888,    // amountSpecified
	// 	)
	// 	jsonStr := gjson.Parse(bestPoolPathDetail)
	// 	shouldEQ(t, jsonStr.Get("response.data.pool_path").String(), barPathfoo_3000")
	// }

	// func TestFindBestPoolFalsePositive(t *testing.T) {
	// 	bestPoolPathDetail := FindBestPool(
	// 		fooPath, // tokenA
	// 		barPath,   // tokenB
	// 		false,   // zeroForOne
	// 		5,       // amountSpecified
	// 	)
	// 	jsonStr := gjson.Parse(bestPoolPathDetail)
	// 	shouldEQ(t, jsonStr.Get("response.data.pool_path").String(), barPathfoo_3000")
	// }

	//	func TestFindBestPoolFalseNegative(t *testing.T) {
	//		bestPoolPathDetail := FindBestPool(
	//			fooPath, // tokenA
	//			barPath,   // tokenB
	//			false,   // zeroForOne
	//			-11,     // amountSpecified
	//		)
	//		jsonStr := gjson.Parse(bestPoolPathDetail)
	//		shouldEQ(t, jsonStr.Get("response.data.pool_path").String(), barPathfoo_3000")
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}
