package pool

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/grc20_wrapper"
)

var (
	gsa  = testutils.TestAddress("gsa")  // Gnoswap Admin
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	tr01 = testutils.TestAddress("tr01") // Trader 01
	pc01 = testutils.TestAddress("pc01") // Pool Creator 01

	poolAddr = std.DerivePkgAddr("gno.land/r/pool")
	posAddr  = std.DerivePkgAddr("gno.land/r/position")
)

var (
	// Common
	fooPath = "gno.land/r/foo" // token1
	barPath = "gno.land/r/bar" // token2

	pFee1           = uint16(500)
	test_tickLower1 = int32(9000)
	test_tickUpper1 = int32(11000)

	pFee2           = uint16(3000)
	test_tickLower2 = int32(9600)
	test_tickUpper2 = int32(12000)

	test_liquidityExpect = bigint(1000)
)

func TestFirstPool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	InitManual()

	std.TestSetOrigCaller(pc01)
	CreatePool(barPath, fooPath, pFee1, 130621891405341611593710811006)

	shouldPanic(t, func() { CreatePool(barPath, fooPath, pFee1, 130621891405341611593710811006) })

	// Test Only Swap
	pool := GetPool(barPath, fooPath, pFee1)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)
	Mint(barPath, fooPath, pFee1, posAddr, test_tickLower1, test_tickUpper1, test_liquidityExpect*100000)

	// clear prev realm
	std.TestSetPrevRealm("")

	// Swap several times
	std.TestSetOrigCaller(tr01)
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee1, tr01, true, bigint(10000), MIN_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee1, tr01, true, bigint(5000), MIN_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee1, tr01, true, bigint(1000), MIN_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	// Swap token1 -> token0
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee1, tr01, false, bigint(160000), MAX_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	// Swap with Protocol
	std.TestSetPrevRealm("")
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)

	test_slot0 := pool.PoolGetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	// Make ProtocolFee via Swap by tr01 ( Mint by lp01 )

	{
		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetPrevRealm("gno.land/r/router")
		std.TestSetOrigCaller(tr01)
		Swap(barPath, fooPath, pFee1, tr01, true, 100000, MIN_PRICE, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0
		Swap(barPath, fooPath, pFee1, tr01, true, 100000, MIN_PRICE, std.GetOrigCaller()) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetPrevRealm("")
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(barPath, fooPath, pFee1, gsa, 100000, 100000)

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, gsaNewToken0Bal-gsaOldToken0Bal, int64(amount0))
		shouldEQ(t, gsaNewToken1Bal-gsaOldToken1Bal, int64(amount1))
	}

	{
		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetPrevRealm("gno.land/r/router")
		std.TestSetOrigCaller(tr01)
		Swap(barPath, fooPath, pFee1, tr01, false, 100000, MAX_PRICE, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0
		Swap(barPath, fooPath, pFee1, tr01, false, 100000, MAX_PRICE, std.GetOrigCaller()) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetPrevRealm("")
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(barPath, fooPath, pFee1, gsa, 100000, 100000)

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, gsaNewToken0Bal-gsaOldToken0Bal, int64(amount0))
		shouldEQ(t, gsaNewToken1Bal-gsaOldToken1Bal, int64(amount1))
	}
}

// foo & bar & 3000
func TestSecondPool(t *testing.T) {
	// std.TestSetOrigCaller(gsa)
	// InitManual()
	std.TestSetOrigCaller(pc01)
	CreatePool(barPath, fooPath, pFee2, 130621891405341611593710811006)

	shouldPanic(t, func() { CreatePool(barPath, fooPath, pFee2, 130621891405341611593710811006) })

	// Test Only Swap
	pool := GetPool(barPath, fooPath, pFee2)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)
	Mint(barPath, fooPath, pFee2, posAddr, test_tickLower2, test_tickUpper2, test_liquidityExpect*50000)

	// Swap several times
	std.TestSetPrevRealm("gno.land/r/router")
	std.TestSetOrigCaller(tr01)
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee2, tr01, true, bigint(10000), MIN_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee2, tr01, true, bigint(5000), MIN_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee2, tr01, true, bigint(1000), MIN_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	// Swap token1 -> token0
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		std.TestSetPrevRealm("gno.land/r/router")
		amount0, amount1 := Swap(barPath, fooPath, pFee2, tr01, false, bigint(160000), MAX_PRICE, std.GetOrigCaller())

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	// Swap with Protocol
	std.TestSetPrevRealm("")
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)

	test_slot0 := pool.PoolGetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	// Make ProtocolFee via Swap by tr01 ( Mint by lp01 )
	std.TestSetOrigCaller(lp01)
	{
		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetPrevRealm("gno.land/r/router")
		std.TestSetOrigCaller(tr01)
		Swap(barPath, fooPath, pFee2, tr01, true, 100000, MIN_PRICE, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0
		Swap(barPath, fooPath, pFee2, tr01, true, 100000, MIN_PRICE, std.GetOrigCaller()) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetPrevRealm("")
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(barPath, fooPath, pFee1, gsa, 100000, 100000)

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, gsaNewToken0Bal-gsaOldToken0Bal, int64(amount0))
		shouldEQ(t, gsaNewToken1Bal-gsaOldToken1Bal, int64(amount1))
	}

	{
		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetPrevRealm("gno.land/r/router")
		std.TestSetOrigCaller(tr01)
		Swap(barPath, fooPath, pFee2, tr01, false, 100000, MAX_PRICE, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0
		Swap(barPath, fooPath, pFee2, tr01, false, 100000, MAX_PRICE, std.GetOrigCaller()) // more protocol fee

		// Gnoswap Admin will collect protocol fee
		std.TestSetPrevRealm("")
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(barPath, fooPath, pFee2, gsa, 100000, 100000)

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, gsaNewToken0Bal-gsaOldToken0Bal, int64(amount0))
		shouldEQ(t, gsaNewToken1Bal-gsaOldToken1Bal, int64(amount1))
	}
}

/* GETTER_API TEST */
func TestApiGetPools(t *testing.T) {
	gpls := ApiGetPools()
	jsonStr := gjson.Parse(gpls)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), GetTimestamp())

	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 2)
	shouldEQ(t, jsonStr.Get("response.data").Array()[0].String(), "gno.land/r/bar:gno.land/r/foo:500")
	shouldEQ(t, jsonStr.Get("response.data").Array()[1].String(), "gno.land/r/bar:gno.land/r/foo:3000")
}

func TestApiGetPool(t *testing.T) {
	gpl := ApiGetPool("gno.land/r/bar:gno.land/r/foo:500")
	jsonStr := gjson.Parse(gpl)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), GetTimestamp())

	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 1)
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, didn't expected %v", got, expected)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}
