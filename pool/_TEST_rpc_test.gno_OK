package pool

import (
	"std"
	"testing"

	"encoding/gjson"

	_ "gno.land/r/demo/grc20_wrapper"
)

var (
	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(100_000_000)

	test_tickLower2 = int32(50000)
	test_tickUpper2 = int32(100000)
)

// 1. Init Pool
func TestInit(t *testing.T) {
	std.TestSetOrigCaller(test1)
	InitManual()
}

// 2. Create Foo:Bar Pool
func TestCreateFooBarPool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	CreatePool(fooPath, barPath, fee500, 130621891405341611593710811006)
	shouldEQ(t, len(pools), 1)
}

// 3. Create Bar:Baz Pool
func TestCreateBarBazPool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	CreatePool(barPath, bazPath, fee500, 130621891405341611593710811006)
	shouldEQ(t, len(pools), 2)
}

// 4. Mint Foo:Bar Liquidity by test1
func TestMintFooBarLiquidity(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/demo/position")
	std.TestSetOrigCaller(test1)

	Mint(
		fooPath,
		barPath,
		fee500,
		posAddr,
		-test_tickUpper,
		-test_tickLower,
		test_liquidityExpect,
	)
}

// 5. Mint Bar:Baz Liquidity by test1
func TestMintBarBazLiquidity(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/demo/position")
	std.TestSetOrigCaller(test1)

	Mint(
		barPath,
		bazPath,
		fee500,
		posAddr,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpect,
	)
}

// API TESTS
func TestApiGetPools(t *testing.T) {
	jsonStr := ApiGetPools()
	jsonArr := gjson.Parse(jsonStr).Get("response").Array()
	shouldEQ(t, len(jsonArr), 2)

	// debug
	println(jsonStr)
}
