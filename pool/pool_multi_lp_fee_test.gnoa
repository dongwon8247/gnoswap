package pool

import (
	"gjson"
	"std"
	"testing"

	"gno.land/p/demo/testutils"
	"gno.land/r/demo/users"

	bar "gno.land/r/bar"
	foo "gno.land/r/foo"
)

var (
	gsa = testutils.TestAddress("gsa") // Gnoswap Admin

	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	lp02 = testutils.TestAddress("lp02") // Liquidity Provider 02

	tr01 = testutils.TestAddress("tr01") // Trader 01

	posAddr = std.DerivePkgAddr("gno.land/r/position")
)

var (
	// Common
	pToken0 = "foo"
	pToken1 = "bar"
	pFee    = uint16(500)

	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(1000)
)

// 1. Init & Create Pool using Factory Contract by gsa
func TestFactoryCreatePool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	InitManual()
	CreatePool("foo", "bar", pFee, 130622891405341611593710811006)
	// 130621891405341611593710811006 // 9999
	// 130622891405341611593710811006 // 10000

	// fee
	// 500		= 0.05% // USv3 default
	// 3000		= 0.3% // USv3 default
	// 10000	= 1% // USv3 default

	// sqrtPrice
	// 130621891405341611593710811006 // tick = 10000
	shouldPanic(t, func() { CreatePool("foo", "bar", 500, 130621891405341611593710811006) })

	// Approve
	std.TestSetOrigCaller(lp01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(lp01), 50000000)
	bar.Approve(users.AddressOrName(lp01), 50000000)

	std.TestSetOrigCaller(lp02)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(lp02), 50000000)
	bar.Approve(users.AddressOrName(lp02), 50000000)

	std.TestSetOrigCaller(tr01)
	foo.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	bar.Approve(users.AddressOrName(GetOrigPkgAddr()), 50000000)
	foo.Approve(users.AddressOrName(tr01), 50000000)
	bar.Approve(users.AddressOrName(tr01), 50000000)
}

// Swap by tr01, Mint by lp01 ~ 02
func TestSwap(t *testing.T) {
	pool := GetPool(pToken0, pToken1, pFee)

	// lp01 mint 9000 ~ 11000 tick range
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)
	Mint(pToken0, pToken1, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*10000)

	// lp02 mint (almost) full range
	// fee 500 will use tickSpacing 10
	// MIN_TICK bigint = -887272
	// MAX_TICK bigint = 887272

	std.TestSetOrigCaller(lp02)
	Mint(pToken0, pToken1, pFee, posAddr, MIN_TICK+2, MAX_TICK-2, test_liquidityExpect*10000)

	test_price_01 := bigint(MIN_SQRT_RATIO + 1) // maximum price
	test_price_10 := bigint(MAX_SQRT_RATIO - 1) // minimum price

	{
		// balance before swap
		poolOldToken0Bal := balanceOf(pool.token0, GetOrigPkgAddr())
		poolOldToken1Bal := balanceOf(pool.token1, GetOrigPkgAddr())

		tr01OldToken0Bal := balanceOf(pool.token0, tr01)
		tr01OldToken1Bal := balanceOf(pool.token1, tr01)

		lp01OldToken0Bal := balanceOf(pool.token0, lp01)
		lp01OldToken1Bal := balanceOf(pool.token1, lp01)

		lp02OldToken0Bal := balanceOf(pool.token0, lp02)
		lp02OldToken1Bal := balanceOf(pool.token1, lp02)

		// SWAP
		std.TestSetOrigCaller(tr01)
		// s0, s1 := Swap(pToken0, pToken1, pFee, tr01, true, bigint(600000), test_price_01)  // 9034
		// s0, s1 := Swap(pToken0, pToken1, pFee, tr01, true, bigint(650000), test_price_01) // 8955
		// println("Current Tick:", pool.GetPoolSlot0Tick())

		// s0, s1 := Swap(pToken0, pToken1, pFee, tr01, true, bigint(620000), test_price_01) // one iteration - yes fee
		s0, s1 := Swap(pToken0, pToken1, pFee, tr01, true, bigint(630000), test_price_01) // one iteration - yes fee(only lp02)

		// s0, s1 := Swap(pToken0, pToken1, pFee, tr01, true, bigint(1400000), test_price_01) // one iteration - no fee
		// s0, s1 := Swap(pToken0, pToken1, pFee, tr01, true, bigint(1500000), test_price_01) // two iteration
		shouldNEQ(t, s0, bigint(0))
		shouldNEQ(t, s1, bigint(0))

		// balance after swap
		poolNewToken0Bal := balanceOf(pool.token0, GetOrigPkgAddr())
		poolNewToken1Bal := balanceOf(pool.token1, GetOrigPkgAddr())

		tr01NewToken0Bal := balanceOf(pool.token0, tr01)
		tr01NewToken1Bal := balanceOf(pool.token1, tr01)

		lp01NewToken0Bal := balanceOf(pool.token0, lp01)
		lp01NewToken1Bal := balanceOf(pool.token1, lp01)

		lp02NewToken0Bal := balanceOf(pool.token0, lp02)
		lp02NewToken1Bal := balanceOf(pool.token1, lp02)

		// To collect fee wihout removing liquidity
		// burn 0
		// then collect

		std.TestSetOrigCaller(lp01)
		Burn(pToken0, pToken1, pFee, test_tickLower, test_tickUpper, 0)
		Collect(pToken0, pToken1, pFee, lp01, test_tickLower, test_tickUpper, 100000000, 100000000)

		std.TestSetOrigCaller(lp02)
		Burn(pToken0, pToken1, pFee, MIN_TICK+2, MAX_TICK-2, 0)
		Collect(pToken0, pToken1, pFee, lp02, MIN_TICK+2, MAX_TICK-2, 100000000, 100000000)
	}
}

/* GETTER_API TEST */
func TestApiGetPools(t *testing.T) {
	gpls := ApiGetPools()
	jsonStr := gjson.Parse(gpls)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), GetTimestamp())

	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 1)
	shouldEQ(t, jsonStr.Get("response.data").Array()[0].String(), "bar_foo_500")
}

func TestApiGetPool(t *testing.T) {
	gpl := ApiGetPool("bar_foo_500")
	jsonStr := gjson.Parse(gpl)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), GetTimestamp())

	shouldEQ(t, len(jsonStr.Get("response.data.Position").Array()), 2)
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, didn't expected %v", got, expected)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}
