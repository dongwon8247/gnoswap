package pool

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/grc20_wrapper"
)

var (
	gsa  = testutils.TestAddress("gsa")  // Gnoswap Admin
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	tr01 = testutils.TestAddress("tr01") // Trader 01
	pc01 = testutils.TestAddress("pc01") // Pool Creator 01

	poolAddr = std.DerivePkgAddr("gno.land/r/pool")
	posAddr  = std.DerivePkgAddr("gno.land/r/position")
)

var (
	// Common
	fooPath = "gno.land/r/foo" // token1
	barPath = "gno.land/r/bar" // token2
	pFee    = uint16(500)

	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(1000)

	test_tickLower2 = int32(50000)
	test_tickUpper2 = int32(100000)
)

// 1. Init & Create Pool using Factory Contract by Gnoswap Admin
func TestInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	InitManual()

	std.TestSetOrigCaller(pc01)
	CreatePool(fooPath, barPath, pFee, 130621891405341611593710811006)

	// sqrtPrice
	// 130621891405341611593710811006 // tick = 10000
	shouldPanic(t, func() { CreatePool(fooPath, barPath, 500, 130621891405341611593710811006) })
}

// 2. Mint by lp01
func TestMint(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	Mint(
		fooPath,
		barPath,
		pFee,
		posAddr,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpect,
	)

	pool := GetPool(fooPath, barPath, pFee)
	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect)

	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)

	m81, m82 := Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	m101, m102 := Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)

	shouldNEQ(t, m81, bigint(0))
	shouldNEQ(t, m82, bigint(0))
	shouldEQ(t, m81, m101)
	shouldEQ(t, m82, m102)

	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	// tickLower > currentTick == don't add to current liquidity
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower2, test_tickUpper2, test_liquidityExpect)

	// tickUpper < current tick == don't add to current liquidity
	Mint(fooPath, barPath, pFee, posAddr, -test_tickUpper2, -test_tickLower2, test_liquidityExpect)

	// tickUpper < tickLower == don't add to current liquidity
	Mint(fooPath, barPath, pFee, posAddr, -test_tickUpper, -test_tickLower, test_liquidityExpect)

	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect)

	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*20)
}

// 3. Burn by lp01
func TestBurn(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	b11, b12 := Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect)
	b21, b22 := Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect)
	shouldEQ(t, b11, b21)
	shouldEQ(t, b12, b22)

	pool := GetPool(fooPath, barPath, pFee)
	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*18)

	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*8)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, 1)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(9999))

	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, 999)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*9)

	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*9)
	test_liquidity = pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	// can't burn when liq is 0
	// Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect)
	shouldPanic(t, func() { Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect) })
}

// 4. Collect
func TestCollect(t *testing.T) {
	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)

	// withdraw all token before test `Collect`
	Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 50000000, 50000000)

	// pool should have zero liquidity
	pool := GetPool(fooPath, barPath, pFee)
	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c11, c12 := Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 50000000, 50000000)

	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c21, c22 := Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 50000000, 50000000)

	shouldEQ(t, c11, c21)
	shouldEQ(t, c12, c22)

	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c31, c32 := Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 100, 100)
	shouldEQ(t, c31, bigint(100))
	shouldEQ(t, c32, bigint(100))

	c41, c42 := Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldEQ(t, c41, c21-bigint(100))
	shouldEQ(t, c42, c22-bigint(100))

	// Mint > No Burn => nothing to collect
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	// Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c51, c52 := Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldEQ(t, c51, bigint(0))
	shouldEQ(t, c52, bigint(0))

	// Burn Now => something to collect
	Burn(fooPath, barPath, pFee, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c61, c62 := Collect(fooPath, barPath, pFee, lp01, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldNEQ(t, c61, bigint(0))
	shouldNEQ(t, c62, bigint(0))
}

// 5. Swap by tr01
func TestSwap(t *testing.T) {
	pool := GetPool(fooPath, barPath, pFee)
	test_liquidity := pool.GetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	std.TestSetPrevRealm("gno.land/r/position")
	std.TestSetOrigCaller(lp01)
	Mint(fooPath, barPath, pFee, posAddr, test_tickLower, test_tickUpper, test_liquidityExpect*20000)

	// Swap several times
	std.TestSetPrevRealm("gno.land/r/router")
	std.TestSetOrigCaller(tr01)
	test_price := bigint(MIN_PRICE)
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		amount0, amount1 := Swap(
			fooPath,
			barPath,
			pFee,
			tr01,
			true,
			bigint(10000),
			test_price,
			std.GetOrigCaller(),
		)

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		amount0, amount1 := Swap(fooPath, barPath, pFee, tr01, true, 5000, test_price, std.GetOrigCaller()) // give enough amount to take fees away

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		amount0, amount1 := Swap(fooPath, barPath, pFee, tr01, true, 1000, test_price, std.GetOrigCaller()) // give enough amount to take fees away

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	// Swap token1 -> token0
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		amount0, amount1 := Swap(fooPath, barPath, pFee, tr01, false, 16000, MAX_PRICE, std.GetOrigCaller()) // give enough amount to take fees away

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, poolAddr)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, poolAddr)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, tr01)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, tr01)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}
}

// 6. SetFeeProtocol by Gnoswap Admin
func TestSetFeeProtocol(t *testing.T) {
	// non admin call
	std.TestSetOrigCaller(lp01)
	shouldPanic(t, func() { SetFeeProtocol(2, 2) })

	// admin call
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)

	for _, pool := range pools {
		shouldEQ(t, pool.GetSlot0().feeProtocol, bigint(134))
	}
}

// 7. CollectProtocol by Gnoswap Admin
func TestCollectProtocol(t *testing.T) {
	std.TestSetOrigCaller(gsa)

	SetFeeProtocol(6, 8)
	pool := GetPool(fooPath, barPath, pFee)
	test_slot0 := pool.GetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, bigint(134))

	// Make ProtocolFee via Swap by tr01 ( Mint by lp01 )
	std.TestSetOrigCaller(lp01)
	{
		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetPrevRealm("gno.land/r/router")
		std.TestSetOrigCaller(tr01)
		Swap(fooPath, barPath, pFee, tr01, true, 200000, MIN_PRICE, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0

		// Gnoswap Admin will collect protocol fee
		std.TestSetPrevRealm("")
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(fooPath, barPath, pFee, gsa, 100000, 100000)

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		shouldEQ(t, gsaNewToken0Bal-gsaOldToken0Bal, int64(amount0))
		shouldEQ(t, gsaNewToken1Bal-gsaOldToken1Bal, int64(amount1))
	}

	{
		gsaOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)

		std.TestSetPrevRealm("gno.land/r/router")
		std.TestSetOrigCaller(tr01)
		Swap(fooPath, barPath, pFee, tr01, false, 200000, MAX_SQRT_RATIO-1, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0

		// Gnoswap Admin will collect protocol fee
		std.TestSetPrevRealm("")
		std.TestSetOrigCaller(gsa)
		amount0, amount1 := CollectProtocol(fooPath, barPath, pFee, gsa, 100000, 100000)

		gsaNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, gsa)
		gsaNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, gsa)
	}
}

/* GETTER_API TEST */
func TestApiGetPools(t *testing.T) {
	gpls := ApiGetPools()
	jsonStr := gjson.Parse(gpls)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), GetTimestamp())

	shouldEQ(t, len(jsonStr.Get("response.data").Array()), 1)
	shouldEQ(t, jsonStr.Get("response.data").Array()[0].String(), "gno.land/r/bar:gno.land/r/foo:500")
}

func TestApiGetPool(t *testing.T) {
	gpl := ApiGetPool("gno.land/r/bar:gno.land/r/foo:500")
	jsonStr := gjson.Parse(gpl)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), GetTimestamp())

	shouldEQ(t, len(jsonStr.Get("response.data.positions").Array()), 4)
}

/* HELPER */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, didn't expected %v", got, expected)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}
