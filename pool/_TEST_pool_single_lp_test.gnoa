package pool

import (
	"std"
	"testing"
	"time"

	"encoding/gjson"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"

	"gno.land/r/demo/consts"
)

var (
	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11000)
	test_liquidityExpect = bigint(1000)

	test_tickLower2 = int32(50000)
	test_tickUpper2 = int32(100000)
)

// 1. Init & Create Pool using Factory Contract by Gnoswap Admin
func TestInitCreatePool(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	InitManual()

	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	CreatePool(barPath, fooPath, fee500, 130621891405341611593710811006) // x2.7
}

// 2. Mint by test1
func TestMint(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), uint64(consts.MAX_UINT64))
	foo.Approve(a2u(consts.POOL_ADDR), uint64(consts.MAX_UINT64))

	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)
	amount0, amount1 := Mint(
		fooPath,
		barPath,
		fee500,
		consts.POSITION_ADDR,
		test_tickLower,
		test_tickUpper,
		test_liquidityExpect,
	)
	shouldEQ(t, amount0, bigint(29))
	shouldEQ(t, amount1, bigint(80))

	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect)

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)

	m81, m82 := Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	m101, m102 := Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)

	shouldNEQ(t, m81, bigint(0))
	shouldNEQ(t, m82, bigint(0))
	shouldEQ(t, m81, m101)
	shouldEQ(t, m82, m102)

	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	// tickLower > currentTick == don't add to current liquidity
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower2, test_tickUpper2, test_liquidityExpect)

	// tickUpper < current tick == don't add to current liquidity
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, -test_tickUpper2, -test_tickLower2, test_liquidityExpect)

	// tickUpper < tickLower == don't add to current liquidity
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, -test_tickUpper, -test_tickLower, test_liquidityExpect)

	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect)

	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*20)
}

// 3. Burn by test1
func TestBurn(t *testing.T) {
	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)

	b11, b12 := Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect)
	b21, b22 := Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect)
	shouldEQ(t, b11, b21)
	shouldEQ(t, b12, b22)

	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*18)

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*8)
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*10)

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, 1)
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, bigint(9999))

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, 999)
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, test_liquidityExpect*9)

	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*9)
	test_liquidity = pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))
}

// 4. Collect
func TestCollect(t *testing.T) {
	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)

	// withdraw all token before test `Collect`
	Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 50000000, 50000000)

	// pool should have zero liquidity
	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c11, c12 := Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 50000000, 50000000)

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c21, c22 := Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 50000000, 50000000)

	shouldEQ(t, c11, c21)
	shouldEQ(t, c12, c22)

	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c31, c32 := Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 100, 100)
	shouldEQ(t, c31, bigint(100))
	shouldEQ(t, c32, bigint(100))

	c41, c42 := Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldEQ(t, c41, c21-bigint(100))
	shouldEQ(t, c42, c22-bigint(100))

	// Mint > No Burn => nothing to collect
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	// Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c51, c52 := Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldEQ(t, c51, bigint(0))
	shouldEQ(t, c52, bigint(0))

	// Burn Now => something to collect
	Burn(barPath, fooPath, fee500, test_tickLower, test_tickUpper, test_liquidityExpect*15)
	c61, c62 := Collect(barPath, fooPath, fee500, test1, test_tickLower, test_tickUpper, 50000000, 50000000)
	shouldNEQ(t, c61, bigint(0))
	shouldNEQ(t, c62, bigint(0))
}

// 5. Swap by test1
func TestSwap(t *testing.T) {
	pool := GetPool(barPath, fooPath, fee500)
	test_liquidity := pool.PoolGetLiquidity()
	shouldEQ(t, test_liquidity, bigint(0))

	std.TestSetPrevRealm(consts.POSITION_PATH)
	std.TestSetOrigCaller(test1)
	Mint(barPath, fooPath, fee500, consts.POSITION_ADDR, test_tickLower, test_tickUpper, test_liquidityExpect*20000)

	// Swap several times
	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)
	test_price := bigint(consts.MIN_PRICE)
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		amount0, amount1 := Swap(
			fooPath,
			barPath,
			fee500,
			test1,
			true,
			bigint(10000),
			test_price,
			std.GetOrigCaller(),
		)

		shouldNEQ(t, amount0, bigint(0))
		shouldNEQ(t, amount1, bigint(0))

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		amount0, amount1 := Swap(barPath, fooPath, fee500, test1, true, 5000, test_price, std.GetOrigCaller()) // give enough amount to take fees away

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		amount0, amount1 := Swap(barPath, fooPath, fee500, test1, true, 1000, test_price, std.GetOrigCaller()) // give enough amount to take fees away

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}

	// Swap token1 -> token0
	{
		poolOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userOldToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userOldToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		amount0, amount1 := Swap(barPath, fooPath, fee500, test1, false, 16000, consts.MAX_PRICE, std.GetOrigCaller()) // give enough amount to take fees away

		poolNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, consts.POOL_ADDR)
		poolNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, consts.POOL_ADDR)

		userNewToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		userNewToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		shouldEQ(t, userOldToken0Bal-userNewToken0Bal, int64(amount0))
		shouldEQ(t, userNewToken1Bal-userOldToken1Bal, int64(-amount1))
		shouldEQ(t, poolNewToken0Bal-poolOldToken0Bal, int64(amount0))
		shouldEQ(t, poolOldToken1Bal-poolNewToken1Bal, int64(-amount1))
	}
}

// 6. SetFeeProtocol by Gnoswap Admin
func TestSetFeeProtocol(t *testing.T) {
	// non admin call
	std.TestSetOrigCaller(gsa)
	shouldPanic(t, func() { SetFeeProtocol(2, 2) })

	// admin call
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)

	for _, pool := range pools {
		shouldEQ(t, pool.PoolGetSlot0().feeProtocol, 134)
	}
}

// 7. CollectProtocol by Gnoswap Admin
func TestCollectProtocol(t *testing.T) {
	std.TestSetOrigCaller(gsa)
	SetFeeProtocol(6, 8)
	pool := GetPool(barPath, fooPath, fee500)
	test_slot0 := pool.PoolGetSlot0()
	shouldEQ(t, test_slot0.feeProtocol, 134)

	// Make ProtocolFee via Swap by test1 ( Mint by test1 )
	std.TestSetOrigCaller(test1)
	{

		std.TestSetPrevRealm(consts.ROUTER_PATH)
		std.TestSetOrigCaller(test1)
		Swap(barPath, fooPath, fee500, test1, true, 200000, consts.MIN_PRICE, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0

		test1OldToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		test1OldToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		std.TestSetPrevAddr(gsa)
		amount0, amount1 := CollectProtocol(barPath, fooPath, fee500, test1, 100000, 100000)

		test1NewToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		test1NewToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		shouldEQ(t, test1NewToken0Bal-test1OldToken0Bal, int64(amount0))
		shouldEQ(t, test1NewToken1Bal-test1OldToken1Bal, int64(amount1))
	}

	{

		std.TestSetPrevRealm(consts.ROUTER_PATH)
		std.TestSetOrigCaller(test1)
		Swap(barPath, fooPath, fee500, test1, false, 200000, consts.MAX_SQRT_RATIO-1, std.GetOrigCaller()) // swap token0 -> token1 => fee only in token0

		test1OldToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		test1OldToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)

		std.TestSetPrevAddr(gsa)
		amount0, amount1 := CollectProtocol(barPath, fooPath, fee500, test1, 100000, 100000)

		test1NewToken0Bal := balanceOfByRegisterCall(pool.token0Path, test1)
		test1NewToken1Bal := balanceOfByRegisterCall(pool.token1Path, test1)
	}
}

/* GETTER_API TEST */
func TestApiGetPools(t *testing.T) {
	gpls := ApiGetPools()
	jsonStr := gjson.Parse(gpls)

	shouldEQ(t, jsonStr.Get("stat.height").Int(), std.GetHeight())
	shouldEQ(t, jsonStr.Get("stat.timestamp").Int(), time.Now().Unix())

	shouldEQ(t, len(jsonStr.Get("response").Array()), 1)
}
