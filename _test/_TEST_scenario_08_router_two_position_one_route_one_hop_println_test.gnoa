// SwapRoute & DrySwapRoute [ 2 position 1 route 1 hop ]
package swap_scneraio

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/demo/grc20_wrapper"

	pl "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"
	rou "gno.land/r/demo/router"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"

	"gno.land/r/demo/gns"
)

var (
	test1 = std.Address("g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5")
	lp01  = testutils.TestAddress("lp01")
	tr01  = testutils.TestAddress("tr01")

	poolAddr     = std.DerivePkgAddr("gno.land/r/demo/pool")
	positionAddr = std.DerivePkgAddr("gno.land/r/demo/position")
	routerAddr   = std.DerivePkgAddr("gno.land/r/demo/router")

	barPath = "gno.land/r/demo/bar"
	bazPath = "gno.land/r/demo/baz"

	barObj = bar.GetGRC20()
	bazObj = baz.GetGRC20()

	max_timeout = bigint(9999999999)
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(test1)

	pl.InitManual()
	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// approve gns to CreatePool ( 500 gns for 1 pool)
	gns.Approve(a2u(poolAddr), 5000)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, 354340008410679467268648495215) // tick 29960 ≈ 1:20

	std.TestSkipHeights(4)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, balanceOf(barObj, lp01), 0)
	shouldEQ(t, balanceOf(bazObj, lp01), 0)

	bar.Faucet(lp01)
	baz.Faucet(lp01)

	shouldEQ(t, balanceOf(barObj, lp01), 100000000)
	shouldEQ(t, balanceOf(bazObj, lp01), 100000000)

	std.TestSkipHeights(5)
}

func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(poolAddr), 10000000)
	baz.Approve(a2u(poolAddr), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pos.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		1000,        // amount0Desired
		1000,        // amount1Desired
		0,           // amount0Min
		0,           // amount1Min
		max_timeout, // deadline
	)
	shouldEQ(t, tokenId, bigint(1))
	shouldEQ(t, liquidity, bigint(447322))
	shouldEQ(t, amount0, bigint(49))
	shouldEQ(t, amoutn1, bigint(1000))

	std.TestSkipHeights(3)
}

func TestPositionMintBarBazInRangeMore(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(poolAddr), 10000000)
	baz.Approve(a2u(poolAddr), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pos.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		1000,        // amount0Desired
		1000,        // amount1Desired
		0,           // amount0Min
		0,           // amount1Min
		max_timeout, // deadline
	)
	shouldEQ(t, tokenId, bigint(2))
	shouldEQ(t, liquidity, bigint(447322))
	shouldEQ(t, amount0, bigint(49))
	shouldEQ(t, amoutn1, bigint(1000))

	std.TestSkipHeights(3)

	poolBar, _ := barObj.BalanceOf(poolAddr)
	poolBaz, _ := bazObj.BalanceOf(poolAddr)
	println("Pool Token0(BAR) Balance:", poolBar)
	println("Pool Token1(BAZ) Balance:", poolBaz)
}

func TestFaucetTR01(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	shouldEQ(t, balanceOf(barObj, tr01), 0)
	shouldEQ(t, balanceOf(bazObj, tr01), 0)

	bar.Faucet(tr01)
	baz.Faucet(tr01)

	shouldEQ(t, balanceOf(barObj, tr01), 100000000)
	shouldEQ(t, balanceOf(bazObj, tr01), 100000000)

	std.TestSkipHeights(5)
}

func TestRouterDrySwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rou.DrySwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		1800,        // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
	)
	println("EXACT_OUT_dryResult:", dryResult)
	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarBazExactOut(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(poolAddr), 100000)

	oldBar := balanceOf(barObj, tr01)
	oldBaz := balanceOf(bazObj, tr01)

	swapResult := rou.SwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		1800,        // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
		"100", // tokenAmountLimit (maxSpent)
	)
	println("EXACT_OUT_swapResult:", swapResult)

	newBar := balanceOf(barObj, tr01)
	newBaz := balanceOf(bazObj, tr01)

	println("R sentBar:", oldBar-newBar)
	println("recvBaz:", newBaz-oldBaz)

	std.TestSkipHeights(2)
}

func TestRouterDrySwapRouteBarBazExactOutTooMuch(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rou.DrySwapRoute(
		barPath,     // inputToken
		bazPath,     // outputToken
		2100,        // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100", // strRouteArr
		"100", // quoteArr
	)
	println("EXACT_OUT_dryResult:", dryResult)
	std.TestSkipHeights(2)
}
