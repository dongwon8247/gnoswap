// SwapRoute & DrySwapRoute [ 1 route 3 hop, with large amount]
package swap_scneraio

import (
	"std"
	"testing"

	"gno.land/p/demo/testutils"

	_ "gno.land/r/demo/grc20_wrapper"

	pl "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"
	rou "gno.land/r/demo/router"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/baz"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/qux"

	"gno.land/r/demo/gns"
	"gno.land/r/demo/obl"
)

var (
	test1 = std.Address("g1jg8mtutu9khhfwc4nxmuhcpftf0pajdhfvsqf5")
	lp01  = testutils.TestAddress("lp01")
	tr01  = testutils.TestAddress("tr01")

	poolAddr     = std.DerivePkgAddr("gno.land/r/demo/pool")
	positionAddr = std.DerivePkgAddr("gno.land/r/demo/position")
	stakerAddr   = std.DerivePkgAddr("gno.land/r/demo/staker")
	routerAddr   = std.DerivePkgAddr("gno.land/r/demo/router")

	barPath = "gno.land/r/demo/bar"
	bazPath = "gno.land/r/demo/baz"
	fooPath = "gno.land/r/demo/foo"
	quxPath = "gno.land/r/demo/qux"

	wugnotPath = "gno.land/r/demo/wugnot"

	gnsPath = "gno.land/r/demo/gns"
	oblPath = "gno.land/r/demo/obl"

	barObj = bar.GetGRC20()
	bazObj = baz.GetGRC20()
	fooObj = foo.GetGRC20()
	quxObj = qux.GetGRC20()

	gnsObj = gns.GetGRC20()
	oblObj = obl.GetGRC20()

	max_timeout = bigint(9999999999)
)

func TestPoolInitByAdmin(t *testing.T) {
	std.TestSetOrigCaller(test1)

	pl.InitManual()
	std.TestSkipHeights(1)
}

func TestPoolCreatePools(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// approve gns to CreatePool ( 500 gns for 1 pool)
	gns.Approve(a2u(poolAddr), 5000)

	// bar-baz
	pl.CreatePool(barPath, bazPath, 100, 354340008410679467268648495215) // tick 29960 ≈ 1:20

	// baz-foo
	pl.CreatePool(bazPath, fooPath, 100, 25050389945027294416741547334) // tick -23030 ≈ 1:0.1

	// foo-qux
	pl.CreatePool(fooPath, quxPath, 100, 17714911063927984461157312042) // tick -29960 ≈ 1:0.05

	std.TestSkipHeights(4)
}

func TestFaucetLP01(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	shouldEQ(t, balanceOf(barObj, lp01), 0)
	shouldEQ(t, balanceOf(bazObj, lp01), 0)
	shouldEQ(t, balanceOf(fooObj, lp01), 0)
	shouldEQ(t, balanceOf(quxObj, lp01), 0)

	bar.Faucet(lp01)
	baz.Faucet(lp01)
	foo.Faucet(lp01)
	qux.Faucet(lp01)

	shouldEQ(t, balanceOf(barObj, lp01), 100000000)
	shouldEQ(t, balanceOf(bazObj, lp01), 100000000)
	shouldEQ(t, balanceOf(fooObj, lp01), 100000000)
	shouldEQ(t, balanceOf(quxObj, lp01), 100000000)

	std.TestSkipHeights(5)
}

func TestPositionMintBarBazInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve bar, baz to pool ( position.Mint() calls pool.Mint() ≈ so approve to pool )
	bar.Approve(a2u(poolAddr), 10000000)
	baz.Approve(a2u(poolAddr), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pos.Mint(
		barPath,     // token0
		bazPath,     // token1
		100,         // fee
		29950,       // tickLower
		29970,       // tickUpper
		10000000,    // amount0Desired
		10000000,    // amount1Desired
		0,           // amount0Min
		0,           // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, bigint(1))
	shouldEQ(t, liquidity, bigint(4473213901))
	shouldEQ(t, amount0, bigint(499941))
	shouldEQ(t, amoutn1, bigint(10000000))

	std.TestSkipHeights(3)
}

func TestPositionMintBazFooInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve baz, foo to pool
	baz.Approve(a2u(poolAddr), 10000000)
	foo.Approve(a2u(poolAddr), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pos.Mint(
		bazPath,     // token0
		fooPath,     // token1
		100,         // fee
		-23050,      // tickLower
		-23010,      // tickUpper
		10000000,    // amount0Desired
		10000000,    // amount1Desired
		0,           // amount0Min
		0,           // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, bigint(2))
	shouldEQ(t, liquidity, bigint(3163542979))
	shouldEQ(t, amount0, bigint(10000000))
	shouldEQ(t, amoutn1, bigint(999700))

	std.TestSkipHeights(3)
}

func TestPositionMintFooQuxInRange(t *testing.T) {
	std.TestSetOrigCaller(lp01)

	// approve foo, qux to pool
	foo.Approve(a2u(poolAddr), 10000000)
	qux.Approve(a2u(poolAddr), 10000000)

	tokenId, liquidity, amount0, amoutn1 := pos.Mint(
		fooPath,     // token0
		quxPath,     // token1
		100,         // fee
		-29980,      // tickLower
		-29940,      // tickUpper
		10000000,    // amount0Desired
		10000000,    // amount1Desired
		0,           // amount0Min
		0,           // amount1Min
		max_timeout, // deadline
	)

	shouldEQ(t, tokenId, bigint(3))
	shouldEQ(t, liquidity, bigint(2237166074))
	shouldEQ(t, amount0, bigint(10000000))
	shouldEQ(t, amoutn1, bigint(499941))

	std.TestSkipHeights(3)
}

func TestFaucetTR01(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	shouldEQ(t, balanceOf(barObj, tr01), 0)
	shouldEQ(t, balanceOf(bazObj, tr01), 0)
	shouldEQ(t, balanceOf(fooObj, tr01), 0)
	shouldEQ(t, balanceOf(quxObj, tr01), 0)

	bar.Faucet(tr01)
	baz.Faucet(tr01)
	foo.Faucet(tr01)
	qux.Faucet(tr01)

	shouldEQ(t, balanceOf(barObj, tr01), 100000000)
	shouldEQ(t, balanceOf(bazObj, tr01), 100000000)
	shouldEQ(t, balanceOf(fooObj, tr01), 100000000)
	shouldEQ(t, balanceOf(quxObj, tr01), 100000000)

	std.TestSkipHeights(5)
}

func TestRouterDrySwapRouteBarQuxExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rou.DrySwapRoute(
		barPath,    // inputToken
		quxPath,    // outputToken
		100000,     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100*POOL*gno.land/r/demo/foo:gno.land/r/demo/qux:100", // strRouteArr
		"100", // quoteArr
	)
	println("EXACT_IN_dryResult:", dryResult)
	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarQuxExactIn(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(poolAddr), 100000)

	oldBar := balanceOf(barObj, tr01)
	oldQux := balanceOf(quxObj, tr01)

	swapResult := rou.SwapRoute(
		barPath,    // inputToken
		quxPath,    // outputToken
		100000,     // amountSpecified
		"EXACT_IN", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100*POOL*gno.land/r/demo/foo:gno.land/r/demo/qux:100", // strRouteArr
		"100", // quoteArr
		"1",   // tokenAmountLimit (minRecv)
	)
	println("EXACT_IN_swapResult:", swapResult)

	newBar := balanceOf(barObj, tr01)
	newQux := balanceOf(quxObj, tr01)

	println("sentBar:", oldBar-newBar)
	println("R recvQux:", newQux-oldQux)

	std.TestSkipHeights(2)
}

func TestRouterDrySwapRouteBarQuxExactOutAfterSwap(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	dryResult := rou.DrySwapRoute(
		barPath,     // inputToken
		quxPath,     // outputToken
		100000,      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100*POOL*gno.land/r/demo/foo:gno.land/r/demo/qux:100", // strRouteArr
		"100", // quoteArr
	)
	println("EXACT_OUT_dryResult:", dryResult)
	std.TestSkipHeights(2)
}

func TestRouterSwapRouteBarQuxExactOutAfterSwap(t *testing.T) {
	std.TestSetOrigCaller(tr01)

	// approve bar to pool
	bar.Approve(a2u(poolAddr), 500000)

	oldBar := balanceOf(barObj, tr01)
	oldQux := balanceOf(quxObj, tr01)

	swapResult := rou.SwapRoute(
		barPath,     // inputToken
		quxPath,     // outputToken
		100000,      // amountSpecified
		"EXACT_OUT", // swapType
		"gno.land/r/demo/bar:gno.land/r/demo/baz:100*POOL*gno.land/r/demo/baz:gno.land/r/demo/foo:100*POOL*gno.land/r/demo/foo:gno.land/r/demo/qux:100", // strRouteArr
		"100",       // quoteArr
		"123456789", // tokenAmountLimit (maxSpent)
	)
	println("EXACT_OUT_swapResult:", swapResult)

	newBar := balanceOf(barObj, tr01)
	newQux := balanceOf(quxObj, tr01)

	println("sentBar:", oldBar-newBar)
	println("recvQux:", newQux-oldQux)

	std.TestSkipHeights(2)
}
