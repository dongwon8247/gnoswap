package staker

import (
	"std"
	"testing"

	gnft "gno.land/r/demo/gnft" // GNFT, Gnoswap NFT
	p "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)

	p.InitManual()
	std.TestSkipHeights(1)

	p.CreatePool(fooPath, barPath, 500, 130621891405341611593710811006)
	std.TestSkipHeights(1)
}

func TestPositionMint(t *testing.T) {
	{
		std.TestSetOrigCaller(test1)
		tPosTokenId, tPosLiquidity, tPosAmount0, tPosAmount1 := pos.Mint(
			fooPath,            // token0
			barPath,            // token1
			uint16(500),        // fee
			int32(9000),        // tickLower
			int32(11000),       // tickUpper
			bigint(1000),       // amount0Desired
			bigint(1000),       // amount1Desired
			bigint(1),          // amount0Min
			bigint(1),          // amount1Min
			bigint(2345678901), // deadline
		)
		std.TestSkipHeights(1)

		shouldEQ(t, tPosTokenId, 1)
		shouldEQ(t, gnft.OwnerOf(tid(tPosTokenId)), GetOrigCaller()) // test1

		// approve nft to staker
		std.TestSetPrevAddr(test1)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(tPosTokenId))
		std.TestSkipHeights(1)
	}

	{
		std.TestSetOrigCaller(test1)
		tPosTokenId, tPosLiquidity, tPosAmount0, tPosAmount1 := pos.Mint(
			fooPath,            // token0
			barPath,            // token1
			uint16(500),        // fee
			int32(9100),        // tickLower
			int32(12000),       // tickUpper
			bigint(5000),       // amount0Desired
			bigint(5000),       // amount1Desired
			bigint(1),          // amount0Min
			bigint(1),          // amount1Min
			bigint(2345678901), // deadline
		)
		std.TestSkipHeights(1)

		shouldEQ(t, tPosTokenId, 2)
		shouldEQ(t, gnft.OwnerOf(tid(tPosTokenId)), GetOrigCaller()) // test1

		// approve nft to staker
		std.TestSetPrevAddr(test1)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(tPosTokenId))
		std.TestSkipHeights(1)
	}
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(test1)

	CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/foo:500", // targetPoolPath
		"gno.land/r/demo/obl",                         // rewardToken
		10_000_000_000,                                // rewardAmount
		GetTimestamp(),                                // startTimestamp
		GetTimestamp()+TIMESTAMP_90DAYS,               // endTimestamp
	)
	std.TestSkipHeights(5)

	shouldPanic(t, func() {
		CreateExternalIncentive("gno.land/r/demo/bar:gno.land/r/demo/foo:500", "OBL", 10_000_000_000, GetTimestamp(), GetTimestamp()+TIMESTAMP_90DAYS)
	})
}

func TestStakeToken(t *testing.T) {
	std.TestSetOrigCaller(test1)
	StakeToken(1)

	// don't stake
	// std.TestSetOrigCaller(test1)
	// StakeToken(2)
}

func TestIsStaked(t *testing.T) {
	shouldEQ(t, IsStaked(1), true)
	shouldEQ(t, IsStaked(2), false)
}
