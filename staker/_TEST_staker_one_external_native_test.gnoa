package staker

import (
	"std"
	"testing"

	"encoding/gjson"

	p "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"

	gnft "gno.land/r/demo/gnft" // GNFT, Gnoswap NFT
	gns "gno.land/r/demo/gns"   // GNS, Gnoswap Share

	wugnot "gno.land/r/demo/wugnot"

	_ "gno.land/r/demo/grc20_wrapper"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/demo/bar:gno.land/r/demo/foo:500"] = 1 // DEV

	// tier 2
	poolTiers["GNS/USDT_500"] = 2
	poolTiers["ATOM/GNS_500"] = 2

	// tier 3
	poolTiers["ATOM/GNOT_500"] = 3
	poolTiers["ATOM/USDT_500"] = 3
	poolTiers["ATOM/WETH_500"] = 3

}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)

	p.InitManual()
	std.TestSkipHeights(1)

	p.CreatePool(barPath, fooPath, 500, 130621891405341611593710811006)
	std.TestSkipHeights(1)
}

func TestPositionMint(t *testing.T) {
	{
		std.TestSetOrigCaller(test1)
		tPosTokenId, tPosLiquidity, tPosAmount0, tPosAmount1 := pos.Mint(
			barPath,            // token0
			fooPath,            // token1
			uint16(500),        // fee
			int32(9000),        // tickLower
			int32(11000),       // tickUpper
			bigint(1000),       // amount0Desired
			bigint(1000),       // amount1Desired
			bigint(1),          // amount0Min
			bigint(1),          // amount1Min
			bigint(2345678901), // deadline
		)
		std.TestSkipHeights(1)

		shouldEQ(t, tPosTokenId, 1)
		shouldEQ(t, gnft.OwnerOf(tid(tPosTokenId)), GetOrigCaller()) // test1

		// approve nft to staker
		std.TestSetPrevAddr(test1)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(tPosTokenId))
		std.TestSkipHeights(1)
	}

	{
		std.TestSetOrigCaller(test1)
		tPosTokenId, tPosLiquidity, tPosAmount0, tPosAmount1 := pos.Mint(
			barPath,            // token10
			fooPath,            // token1
			uint16(500),        // fee
			int32(9100),        // tickLower
			int32(12000),       // tickUpper
			bigint(5000),       // amount0Desired
			bigint(5000),       // amount1Desired
			bigint(1),          // amount0Min
			bigint(1),          // amount1Min
			bigint(2345678901), // deadline
		)
		std.TestSkipHeights(1)

		shouldEQ(t, tPosTokenId, 2)
		shouldEQ(t, gnft.OwnerOf(tid(tPosTokenId)), GetOrigCaller()) // test1

		// approve nft to staker
		std.TestSetPrevAddr(test1)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(tPosTokenId))
		std.TestSkipHeights(1)
	}
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(test1)

	// send
	std.TestSetOrigSend(std.Coins{{"ugnot", 10_000_000_000}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 10_000_000_000)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/foo:500", // targetPoolPath
		wgnotPath,                       // rewardToken
		10_000_000_000,                  // rewardAmount
		GetTimestamp(),                  // startTimestamp
		GetTimestamp()+TIMESTAMP_90DAYS, // endTimestamp
	)
	std.TestSkipHeights(1)
}

func TestStakeToken(t *testing.T) {
	{
		std.TestSetOrigCaller(test1)
		StakeToken(1) // GNFT tokenId
		std.TestSkipHeights(2)

		shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
		shouldEQ(t, len(deposits), 1)
	}

	{
		std.TestSetOrigCaller(test1)
		StakeToken(2) // GNFT tokenId
		std.TestSkipHeights(2)

		shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
		shouldEQ(t, len(deposits), 2)
	}
}

func TestApiGetRewardsByAddress(t *testing.T) {
	// test1 reward check
	gra := ApiGetRewardByAddress(test1)
	jsonStr := gjson.Parse(gra)
	shouldEQ(t, jsonStr.Get("response.data.0.incentiveType").String(), "INTERNAL")
	shouldEQ(t, jsonStr.Get("response.data.0.targetPoolPath").String(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
	shouldEQ(t, jsonStr.Get("response.data.0.rewardTokenPath").String(), INTERNAL_REWARD_TOKEN_PATH)
	shouldEQ(t, jsonStr.Get("response.data.0.rewardTokenAmount").Int(), 252)

	shouldEQ(t, jsonStr.Get("response.data.1.incentiveType").String(), "EXTERNAL")
	shouldEQ(t, jsonStr.Get("response.data.0.targetPoolPath").String(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
	shouldEQ(t, jsonStr.Get("response.data.1.rewardTokenPath").String(), "gno.land/r/demo/wugnot")
	shouldEQ(t, jsonStr.Get("response.data.1.rewardTokenAmount").Int(), 324)

}

func TestUnstakeToken(t *testing.T) {
	{
		std.TestSetOrigCaller(test1)
		UnstakeToken(1) // GNFT tokenId
		std.TestSkipHeights(1)

		shouldEQ(t, gnft.OwnerOf(tid(1)), test1)

		// check reward
		shouldEQ(t, gns.BalanceOf(a2u(test1)), 499999999999752) // internal
		shouldEQ(t, wugnot.BalanceOf(a2u(test1)), 324)          // external
	}

	{
		std.TestSetOrigCaller(test1)
		UnstakeToken(2) // GNFT tokenId
		std.TestSkipHeights(1)

		shouldEQ(t, gnft.OwnerOf(tid(2)), test1)

		// check reward
		shouldEQ(t, gns.BalanceOf(a2u(test1)), 500000000001402) // internal
		shouldEQ(t, wugnot.BalanceOf(a2u(test1)), 2445)         // external
	}
}

func TestEndExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(test1)
	std.TestSkipHeights(9999999)
	EndExternalIncentive(GetOrigCaller().String(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500", wgnotPath) // use same parameter as CreateExternalIncentive()
	std.TestSkipHeights(1)

	shouldEQ(t, len(incentives), 0)
	shouldEQ(t, len(poolIncentives["gno.land/r/demo/bar:gno.land/r/demo/foo:500"]), 0)
}
