package staker

import (
	"std"
	"testing"

	"encoding/gjson"

	"gno.land/p/demo/testutils"

	g "gno.land/r/demo/gov"
	p "gno.land/r/demo/pool"
	pos "gno.land/r/demo/position"

	gnft "gno.land/r/demo/gnft" // GNFT, Gnoswap NFT
	gns "gno.land/r/demo/gns"   // GNS, Gnoswap Share

	// WUGNOT, Wrapped UGNOT
	_ "gno.land/r/demo/grc20_wrapper"
)

var (
	pc01 = testutils.TestAddress("pc01") // Pool Creator
	ci01 = testutils.TestAddress("ci01") // Create Incentive Caller
	lp01 = testutils.TestAddress("lp01") // Liquidity Provider 01
	lp02 = testutils.TestAddress("lp02") // Liquidity Provider 02

	ira = testutils.TestAddress("ira") // Internal Reward Account

	stakerAddr = std.DerivePkgAddr("gno.land/r/demo/staker")
)

var (
	fooPath  = "gno.land/r/demo/foo"
	barPath  = "gno.land/r/demo/bar"
	gnotPath = "gnotPath"
)

func init() {
	// init pool tiers
	// tier 1
	poolTiers["gno.land/r/demo/bar:gno.land/r/demo/foo:500"] = 1 // DEV

	// tier 2
	poolTiers["GNS/USDT_500"] = 2
	poolTiers["ATOM/GNS_500"] = 2

	// tier 3
	poolTiers["ATOM/GNOT_500"] = 3
	poolTiers["ATOM/USDT_500"] = 3
	poolTiers["ATOM/WETH_500"] = 3

	// // debug addr
	// println(pc01, "// pc01")
	// println(ci01, "// ci01")
	// println(lp01, "// lp01")
	// println(lp02, "// lp02")
	// println(stakerAddr, "// staker")
}

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(pc01)

	p.InitManual()
	std.TestSkipHeights(1)

	p.CreatePool(barPath, fooPath, 500, 130621891405341611593710811006)
	std.TestSkipHeights(1)
}

func TestPositionMint(t *testing.T) {
	{
		std.TestSetOrigCaller(lp01)
		tPosTokenId, tPosLiquidity, tPosAmount0, tPosAmount1 := pos.Mint(
			barPath,            // token0
			fooPath,            // token1
			uint16(500),        // fee
			int32(9000),        // tickLower
			int32(11000),       // tickUpper
			bigint(1000),       // amount0Desired
			bigint(1000),       // amount1Desired
			bigint(1),          // amount0Min
			bigint(1),          // amount1Min
			bigint(2345678901), // deadline
		)
		std.TestSkipHeights(1)

		shouldEQ(t, tPosTokenId, 1)
		shouldEQ(t, gnft.OwnerOf(tid(tPosTokenId)), GetOrigCaller()) // lp01

		// approve nft to staker
		std.TestSetPrevAddr(lp01)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(tPosTokenId))
		std.TestSkipHeights(1)
	}

	{
		std.TestSetOrigCaller(lp02)
		tPosTokenId, tPosLiquidity, tPosAmount0, tPosAmount1 := pos.Mint(
			barPath,            // token10
			fooPath,            // token1
			uint16(500),        // fee
			int32(9100),        // tickLower
			int32(12000),       // tickUpper
			bigint(5000),       // amount0Desired
			bigint(5000),       // amount1Desired
			bigint(1),          // amount0Min
			bigint(1),          // amount1Min
			bigint(2345678901), // deadline
		)
		std.TestSkipHeights(1)

		shouldEQ(t, tPosTokenId, 2)
		shouldEQ(t, gnft.OwnerOf(tid(tPosTokenId)), GetOrigCaller()) // lp02

		// approve nft to staker
		std.TestSetPrevAddr(lp02)
		gnft.Approve(a2u(GetOrigPkgAddr()), tid(tPosTokenId))
		std.TestSkipHeights(1)
	}
}

func TestCreateExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(ci01)

	// give ci01 enough ugnot to create incentive
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.IssueCoin(std.GetOrigCaller(), "ugnot", 10_000_000_000)

	// send
	std.TestSetOrigSend(std.Coins{{"ugnot", 10_000_000_000}}, nil)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 10_000_000_000)
	testBanker.IssueCoin(stakerAddr, "ugnot", 10_000_000_000)

	CreateExternalIncentive(
		"gno.land/r/demo/bar:gno.land/r/demo/foo:500", // targetPoolPath
		GNOT,                                // rewardToken
		10_000_000_000,                      // rewardAmount
		GetTimestamp(),                      // startTimestamp
		GetTimestamp()+TIMESTAMP_90DAYS,     // endTimestamp
	)
	std.TestSkipHeights(1)
}

func TestStakeToken(t *testing.T) {
	{
		std.TestSetOrigCaller(lp01)
		StakeToken(1) // GNFT tokenId
		std.TestSkipHeights(2)

		shouldEQ(t, gnft.OwnerOf(tid(1)), GetOrigPkgAddr()) // staker
		shouldEQ(t, len(deposits), 1)
	}

	{
		std.TestSetOrigCaller(lp02)
		StakeToken(2) // GNFT tokenId
		std.TestSkipHeights(2)

		shouldEQ(t, gnft.OwnerOf(tid(2)), GetOrigPkgAddr()) // staker
		shouldEQ(t, len(deposits), 2)
	}
}

func TestApiGetRewardsByAddress(t *testing.T) {
	{
		// lp01 reward check
		gra := ApiGetRewardByAddress(lp01)
		jsonStr := gjson.Parse(gra)
		shouldEQ(t, jsonStr.Get("response.data.0.type").String(), "Internal")
		shouldEQ(t, jsonStr.Get("response.data.0.token").String(), "GNS")
		shouldEQ(t, jsonStr.Get("response.data.0.reward").Int(), 126)
		shouldEQ(t, jsonStr.Get("response.data.1.type").String(), "External")
		shouldEQ(t, jsonStr.Get("response.data.1.token").String(), "gnot")
		shouldEQ(t, jsonStr.Get("response.data.1.reward").Int(), 324)
	}

	{
		// lp02 reward check
		gra := ApiGetRewardByAddress(lp02)
		jsonStr := gjson.Parse(gra)
		shouldEQ(t, jsonStr.Get("response.data.0.type").String(), "Internal")
		shouldEQ(t, jsonStr.Get("response.data.0.token").String(), "GNS")
		shouldEQ(t, jsonStr.Get("response.data.0.reward").Int(), 698)
		shouldEQ(t, jsonStr.Get("response.data.1.type").String(), "External")
		shouldEQ(t, jsonStr.Get("response.data.1.token").String(), "gnot")
		shouldEQ(t, jsonStr.Get("response.data.1.reward").Int(), 1797)
	}
}

func TestUnstakeToken(t *testing.T) {
	{
		std.TestSetOrigCaller(lp01)
		UnstakeToken(1) // GNFT tokenId
		std.TestSkipHeights(1)

		shouldEQ(t, gnft.OwnerOf(tid(1)), lp01)

		// check reward
		shouldEQ(t, gns.BalanceOf(a2u(lp01)), 126) // internal
		shouldEQ(t, ugnotBalance(lp01), 324)       // external
	}

	{
		std.TestSetOrigCaller(lp02)
		UnstakeToken(2) // GNFT tokenId
		std.TestSkipHeights(1)

		shouldEQ(t, gnft.OwnerOf(tid(2)), lp02)

		// check reward
		shouldEQ(t, gns.BalanceOf(a2u(lp02)), 825) // internal
		shouldEQ(t, ugnotBalance(lp02), 2121)      // external
	}
}

func TestEndExternalIncentive(t *testing.T) {
	std.TestSetOrigCaller(ci01)
	std.TestSkipHeights(9999999)
	EndExternalIncentive(GetOrigCaller().String(), "gno.land/r/demo/bar:gno.land/r/demo/foo:500", GNOT) // use same parameter as CreateExternalIncentive()
	std.TestSkipHeights(1)

	shouldEQ(t, len(incentives), 0)
	shouldEQ(t, len(poolIncentives["gno.land/r/demo/bar:gno.land/r/demo/foo:500"]), 0)
}

// GOV
func TestSubmitProposalParameterStakingReward(t *testing.T) {
	// Init GOV Contract
	g.Init()

	id := SubmitProposalParameterStakingReward(
		"staking reward change",  // title
		"change staking rewards", // summary
		"",                       // metadata
		0,                        // initialDeposit

		10, // newStakingReward1
		8,  // newStakingReward2
		6,  // newStakingReward3
		4,  // newStakingReward4
	)
	shouldEQ(t, id, uint64(1))
}

/* HELPERS */
func shouldEQ(t *testing.T, got, expected interface{}) {
	if got != expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldNEQ(t *testing.T, got, expected interface{}) {
	if got == expected {
		t.Errorf("got %v, expected %v", got, expected)
	}
}

func shouldGT(t *testing.T, l, r interface{}) {
	if !(l < r) {
		t.Errorf("expected %v < %v", l, r)
	}
}

func shouldLT(t *testing.T, l, r interface{}) {
	if !(l > r) {
		t.Errorf("expected %v > %v", l, r)
	}
}

func shouldPanic(t *testing.T, f func()) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("expected panic")
		}
	}()
	f()
}

func ugnotBalance(addr std.Address) uint64 {
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	return uint64(testBanker.GetCoins(addr)[0].Amount)
}
