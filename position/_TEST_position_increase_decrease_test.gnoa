package position

import (
	"std"
	"testing"

	"gno.land/p/demo/common"

	"gno.land/r/demo/consts"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"
	"gno.land/r/demo/gns"

	pl "gno.land/r/demo/pool"
)

// 1. Init & Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	pl.InitManual()

	std.TestSetPrevAddr(test1)
	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(10000)) // x2.71814592682522526700950038502924144268035888671875
}

func TestMintPosition(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), 18394891)
	foo.Approve(a2u(consts.POOL_ADDR), 49999999) // r3v4_xxx: liquidity_management.gno #26

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		bigint(50_000_000),
		bigint(50_000_000),
		bigint(0),
		bigint(0),
		max_timeout,
	)
	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, bigint(18394891))
	shouldEQ(t, amount1, bigint(49999999)) // r3v4_xxx: liquidity_management.gno #26
}

func TestIncreaseLiquidity(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), 3678978)
	foo.Approve(a2u(consts.POOL_ADDR), 9999999) // r3v4_xxx: liquidity_management.gno #26

	pool := getPoolFromLpTokenId(uint64(1))
	oldLiquidity := pool.PoolGetLiquidity()

	_, _, m0, m1 := IncreaseLiquidity(
		uint64(1),          // tokenId
		bigint(10_000_000), // amount0Desired
		bigint(10_000_000), // amount1Desired
		bigint(0),          // amount0Min
		bigint(0),          // amount1Min
		max_timeout,        // deadline
	)
	shouldEQ(t, m0, bigint(3678978))
	shouldEQ(t, m1, bigint(9999999)) // r3v4_xxx: liquidity_management.gno #26

	newLiquidity := pool.PoolGetLiquidity()

	shouldGT(t, oldLiquidity, newLiquidity)
}

func TestCollectFeeBeforeSwap(t *testing.T) {
	std.TestSetPrevAddr(test1)

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, bigint(0))
	shouldEQ(t, fee1, bigint(0))
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

func TestSwap(t *testing.T) {
	std.TestSetPrevAddr(test1)
	bar.Approve(a2u(consts.POOL_ADDR), 1_234_567)

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		test1,
		true,
		bigint(1_234_567),
		consts.MIN_PRICE,
		test1,
	)
}

func TestCollectFeeAfterSwap(t *testing.T) {
	std.TestSetPrevAddr(test1)

	bar.Approve(a2u(consts.POOL_ADDR), uint64(consts.MAX_UINT64))
	foo.Approve(a2u(consts.POOL_ADDR), uint64(consts.MAX_UINT64))

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, bigint(611)) // this is input token
	shouldEQ(t, fee1, bigint(0))   // this it output token
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

func TestCollectFee2(t *testing.T) {
	std.TestSetPrevRealm("")
	std.TestSetOrigCaller(test1)

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, bigint(0)) // this is input token
	shouldEQ(t, fee1, bigint(0)) // this it output token
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")

	fee0, fee1 = unclaimedFee(uint64(1))
	shouldEQ(t, fee0, bigint(0))
	shouldEQ(t, fee1, bigint(0))
}

func TestSwap2(t *testing.T) {
	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		test1,
		true,
		bigint(1_000_000),
		consts.MIN_PRICE,
		test1,
	)

	// UNCLAIMED_FEE
	std.TestSetPrevRealm("")
	std.TestSetOrigCaller(test1)

	fee0, fee1 := unclaimedFee(uint64(1))
	shouldEQ(t, fee0, bigint(499))
	shouldEQ(t, fee1, bigint(0))

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, bigint(495)) // 499 -> 495 â‰ˆ cause of protocol fee
	shouldEQ(t, fee1, bigint(0))
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

func TestDecreaseLiquidity(t *testing.T) {
	std.TestSetPrevRealm("")
	std.TestSetOrigCaller(test1)

	oldLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()

	tokenId, liquidity, amount0, amount1, targetPoolPath := DecreaseLiquidity(
		uint64(1),          // tokenId
		bigint(10_000_000), // liquidity
		bigint(0),          // amount0Min
		bigint(0),          // amount1Min
		max_timeout,        // deadline
	)

	newLiquidity := getPoolFromLpTokenId(uint64(1)).PoolGetLiquidity()
	shouldLT(t, oldLiquidity, newLiquidity)

	// check fee left
	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, bigint(0))
	shouldEQ(t, fee1, bigint(0))
}
