package position

import (
	"std"
	"testing"

	"gno.land/r/demo/gnoswap/consts"

	pl "gno.land/r/demo/pool"

	"gno.land/r/demo/bar"
	"gno.land/r/demo/foo"

	"gno.land/r/demo/gnft"
	"gno.land/r/demo/gns"
)

func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetPrevAddr(gsa)

	gns.Approve(a2u(consts.POOL_ADDR), consts.POOL_CREATION_FEE)
	pl.CreatePool(barPath, fooPath, fee500, "130621891405341611593710811006") // tick = 10000
	// event: {GNOSWAP gno.land/r/demo/pool CreatePool [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	bar.Approve(a2u(consts.POOL_ADDR), 18394892)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	// event: {GNOSWAP gno.land/r/demo/position Mint [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower 8000} {p_tickUpper 12000} {tokenId 1} {liquidity 318704392} {amount0 18394892} {amount1 50000000}]}

	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, "18394892")
	shouldEQ(t, amount1, "50000000")
}

func TestMintPosition02LowerRange(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	bar.Approve(a2u(consts.POOL_ADDR), 0)
	foo.Approve(a2u(consts.POOL_ADDR), 50000000)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		5000,
		8000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	//  event: {GNOSWAP gno.land/r/demo/position Mint [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower 5000} {p_tickUpper 8000} {tokenId 2} {liquidity 240632772} {amount0 0} {amount1 50000000}]}

	shouldEQ(t, tokenId, 2)
	shouldEQ(t, getNextId(), 3)
	shouldEQ(t, amount0, "0")
	shouldEQ(t, amount1, "50000000")
}

func TestMintPosition03UpperRange(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	bar.Approve(a2u(consts.POOL_ADDR), 50000000)
	foo.Approve(a2u(consts.POOL_ADDR), 0)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		12000,
		14000,
		"50000000",
		"50000000",
		"0",
		"0",
		max_timeout,
		gsa.String(),
	)
	// event: {GNOSWAP gno.land/r/demo/position Mint [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_tickLower 12000} {p_tickUpper 14000} {tokenId 3} {liquidity 957388253} {amount0 50000000} {amount1 0}]}

	shouldEQ(t, tokenId, 3)
	shouldEQ(t, getNextId(), 4)
	shouldEQ(t, amount0, "50000000")
	shouldEQ(t, amount1, "0")
}

func TestCollectFeeBeforeSwap(t *testing.T) {
	tokenId, fee0, fee1, poolPath := CollectFee(1)
	// event: {GNOSWAP gno.land/r/demo/pool HandleWithdrawalFee [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/position} {p_tokenId 1} {p_token0Path gno.land/r/demo/bar} {p_token1Path gno.land/r/demo/foo} {fee0Amount 0} {fee1Amount 0}]}
	// event: {GNOSWAP gno.land/r/demo/position CollectFee [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 1} {fee0 0} {fee1 0} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, "0")
	shouldEQ(t, fee1, "0")
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

func TestSwap(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	bar.Approve(a2u(consts.POOL_ADDR), 1234567)

	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(gsa)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		gsa.String(),
		true,
		"1234567",
		consts.MIN_PRICE,
		gsa.String(),
	)
	// event: {GNOSWAP gno.land/r/demo/pool Swap [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/router} {p_poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {p_zeroForOne true} {p_amountSpecified 1234567} {p_sqrtPriceLimitX96 4295128740} {p_payer g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {p_recipient g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {amount0 1234567} {amount1 -3332779} {protocol_fee0 0} {protocol_fee1 0}]}

	shouldEQ(t, amount0, "1234567")
	shouldEQ(t, amount1, "-3332779")
}

func TestCollectFeeAfterSwap(t *testing.T) {
	std.TestSetPrevAddr(gsa)
	foo.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE
	bar.Approve(a2u(consts.POOL_ADDR), consts.UINT64_MAX) // COLLECT_FEE

	tokenId, fee0, fee1, poolPath := CollectFee(1)
	// event: {GNOSWAP gno.land/r/demo/pool HandleWithdrawalFee [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/position} {p_tokenId 1} {p_token0Path gno.land/r/demo/bar} {p_token1Path gno.land/r/demo/foo} {fee0Amount 6} {fee1Amount 0}]}
	// event: {GNOSWAP gno.land/r/demo/position CollectFee [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 1} {fee0 617} {fee1 0} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}

	shouldEQ(t, tokenId, uint64(1))
	shouldNEQ(t, fee0, "0") // this is input token
	shouldEQ(t, fee1, "0")  // this it output token
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

func TestDecreaseLiquidityUpperPosition(t *testing.T) {
	std.TestSetPrevAddr(gsa)

	ownerOfPosition := gnft.OwnerOf(tid(3))
	shouldEQ(t, ownerOfPosition, std.GetOrigCaller())

	tokenId, liquidity, fee0, fee1, amount0, amount1, poolPath := DecreaseLiquidity(uint64(3), 100, "0", "0", max_timeout, false)
	// event: {GNOSWAP gno.land/r/demo/pool HandleWithdrawalFee [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm gno.land/r/demo/position} {p_tokenId 3} {p_token0Path gno.land/r/demo/bar} {p_token1Path gno.land/r/demo/foo} {fee0Amount 0} {fee1Amount 0}]}
	// event: {GNOSWAP gno.land/r/demo/position CollectFee [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 3} {fee0 0} {fee1 0} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500}]}
	// event: {GNOSWAP gno.land/r/demo/position DecreaseLiquidity [{m_origCaller g13f63ua8uhmuf9mgc0x8zfz04yrsaqh7j78vcgq} {m_prevRealm } {p_tokenId 3} {p_liquidityRatio 100} {poolPath gno.land/r/demo/bar:gno.land/r/demo/foo:500} {liquidity 957388253} {fee0 0} {fee1 0} {amount0 49999999} {amount1 0}]}

	shouldEQ(t, tokenId, uint64(3))
	shouldEQ(t, amount0, "49999999")
	shouldEQ(t, amount1, "0")

	ownerOfPosition = gnft.OwnerOf(tid(3))
	shouldEQ(t, ownerOfPosition, std.GetOrigCaller())
}
