package position

import (
	"encoding/gjson"
	"std"
	"testing"

	"gno.land/p/demo/common"
	"gno.land/r/demo/consts"

	pl "gno.land/r/demo/pool"

	"gno.land/r/demo/gnft"
)

// 1. Init & Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	pl.InitManual()

	std.TestSetOrigCaller(test1)
	pl.CreatePool(barPath, fooPath, fee500, common.TickMathGetSqrtRatioAtTick(10000)) // x2.71814592682522526700950038502924144268035888671875

	// sqrtPrice
	shouldPanic(t, func() { pl.CreatePool(fooPath, barPath, fee500, common.TickMathGetSqrtRatioAtTick(10000)) })
}

func TestMintPosition01InRange(t *testing.T) {
	std.TestSetOrigCaller(test1)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		8000,
		12000,
		bigint(50000000),
		bigint(50000000),
		bigint(0),
		bigint(0),
		max_timeout,
	)
	shouldEQ(t, tokenId, 1)
	shouldEQ(t, getNextId(), 2)
	shouldEQ(t, amount0, bigint(18394891))
	shouldEQ(t, amount1, bigint(50000000))
}

func TestMintPosition02LowerRange(t *testing.T) {
	std.TestSetOrigCaller(test1)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		5000,
		8000,
		bigint(50000000),
		bigint(50000000),
		bigint(0),
		bigint(0),
		max_timeout,
	)
	shouldEQ(t, tokenId, 2)
	shouldEQ(t, getNextId(), 3)
	shouldEQ(t, amount0, bigint(0))
	shouldEQ(t, amount1, bigint(50000000))
}

func TestMintPosition03UpperRange(t *testing.T) {
	std.TestSetOrigCaller(test1)

	tokenId, liquidity, amount0, amount1 := Mint(
		barPath,
		fooPath,
		fee500,
		12000,
		14000,
		bigint(50000000),
		bigint(50000000),
		bigint(0),
		bigint(0),
		max_timeout,
	)
	shouldEQ(t, tokenId, 3)
	shouldEQ(t, getNextId(), 4)
	shouldEQ(t, amount0, bigint(50000000))
	shouldEQ(t, amount1, bigint(0))
}

func TestCollectFeeBeforeSwap(t *testing.T) {
	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldEQ(t, fee0, bigint(0))
	shouldEQ(t, fee1, bigint(0))
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")
}

func TestSwap(t *testing.T) {
	std.TestSetPrevRealm(consts.ROUTER_PATH)
	std.TestSetOrigCaller(test1)
	amount0, amount1 := pl.Swap(
		barPath,
		fooPath,
		fee500,
		test1,
		true,
		bigint(1_234_567),
		consts.MIN_PRICE,
		test1,
	)
}

func TestCollectFeeAfterSwap(t *testing.T) {
	tokenId, fee0, fee1, poolPath := CollectFee(1)
	shouldEQ(t, tokenId, uint64(1))
	shouldNEQ(t, fee0, bigint(0)) // this is input token
	shouldEQ(t, fee1, bigint(0))  // this it output token
	shouldEQ(t, poolPath, "gno.land/r/demo/bar:gno.land/r/demo/foo:500")

}

func TestBurnUpperPosition(t *testing.T) {
	std.TestSetOrigCaller(test1)

	ownerOfPosition := gnft.OwnerOf(tid(3))
	shouldEQ(t, ownerOfPosition, GetOrigCaller())

	tokenId, liquidity, amount0, amount1, poolPath := Burn(3)
	shouldEQ(t, tokenId, uint64(3))
	shouldEQ(t, amount0, bigint(50000000))
	shouldEQ(t, amount1, bigint(0))

	ownerOfPosition = gnft.OwnerOf(tid(3))
	shouldEQ(t, ownerOfPosition, GetOrigCaller())
}

func TestApiGetPositions(t *testing.T) {
	gpss := ApiGetPositions()
	jsonStr := gjson.Parse(gpss)
	jsonArr := jsonStr.Get("response").Array()
	shouldEQ(t, len(jsonArr), 3)

	shouldEQ(t, jsonArr[0].Get("burned").Bool(), false)
	shouldEQ(t, jsonArr[2].Get("burned").Bool(), true)
}
