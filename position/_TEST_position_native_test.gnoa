package position

import (
	"std"
	"testing"

	_ "gno.land/r/demo/grc20_wrapper"
	p "gno.land/r/demo/pool"

	"gno.land/r/demo/wugnot"
)

var (
	test_tickLower       = int32(9000)
	test_tickUpper       = int32(11_000)
	test_liquidityExpect = bigint(1_000)
)

// 1. Init & Create Pool
func TestPoolInitCreatePool(t *testing.T) {
	std.TestSetOrigCaller(test1)
	p.InitManual()

	std.TestSetOrigCaller(test1)
	p.CreatePool(fooPath, wgnotPath, fee500, 130621891405341611593710811006) // tick 10_000 â‰ˆ ratio x2.718145

	shouldPanic(t, func() { p.CreatePool(fooPath, wgnotPath, 500, 130621891405341611593710811006) })
}

// 2. Mint LP and Get GNFT
func TestMint(t *testing.T) {
	// test1 mints, will get tid 1 nft
	std.TestSetOrigCaller(test1)

	token0, token1 := fooPath, wgnotPath
	if token1 < token0 {
		token0, token1 = token1, token0
	}

	// simulate transfer & decrase
	std.TestSetOrigSend(std.Coins{{"ugnot", 1_000}}, nil)
	testBanker := std.GetBanker(std.BankerTypeRealmIssue)
	testBanker.RemoveCoin(std.GetOrigCaller(), "ugnot", 1_000)

	// Deposit(wrap)
	std.TestSetPrevAddr(test1)
	wugnot.Deposit()

	// Mint
	tTokenId, tLiquidity, tAmount0, tAmount1 := Mint(
		fooPath,
		wgnotPath,
		fee500,
		test_tickLower,
		test_tickUpper,
		bigint(1_000),
		bigint(1_000),
		bigint(1),
		bigint(1),
		bigint(1234567890),
	)

	shouldEQ(t, tAmount0, bigint(367))
	shouldEQ(t, tAmount1, bigint(999))

	isOwner(t, tTokenId, test1)
	shouldEQ(t, tTokenId, 1)
	shouldEQ(t, getNextId(), 2)

}

func TestDecreaseLiquidity(t *testing.T) {
	// test1 decreases liquidity at tid 1 position ( in range )
	std.TestSetOrigCaller(test1)
	pool := p.GetPool(fooPath, wgnotPath, fee500)

	tTargetLiquidity := bigint(1234)

	poolOldLiquidity := pool.PoolGetLiquidity()

	tAmount0, tAmount1 := DecreaseLiquidity(
		bigint(1),
		tTargetLiquidity,
		bigint(1234567890),
	)

	shouldNEQ(t, tAmount0, bigint(0))
	shouldNEQ(t, tAmount1, bigint(0))

	// decreasing liquidity doesn't decrease tid
	// Decreaseliquitiy() => Burn() doesn't decrease pool's balance
	// Collect() will decrease pool's balance
	shouldEQ(t, pool.PoolGetLiquidity(), poolOldLiquidity-tTargetLiquidity)
}

func TestCollect(t *testing.T) {
	// test1 did decrease some liquidity => there are some to collect
	{
		std.TestSetOrigCaller(test1)
		pool := p.GetPool(fooPath, wgnotPath, fee500)

		poolOldLiquidity := pool.PoolGetLiquidity() // == position[1] liquidity

		// Collect => pool.Burn()
		tAmount0, tAmount1 := Collect(
			bigint(1),
			test1,
			bigint(10),
			bigint(10),
		)

		shouldEQ(t, tAmount0, bigint(10))
		shouldEQ(t, tAmount1, bigint(10))

		// After Collect
		// pool's liquidity stays same
		// pool's balance decreases
		shouldEQ(t, pool.PoolGetLiquidity(), poolOldLiquidity)

	}

	// test1 collect all
	{
		std.TestSetOrigCaller(test1)
		pool := p.GetPool(fooPath, wgnotPath, fee500)

		poolOldLiquidity := pool.PoolGetLiquidity()

		tAmount0, tAmount1 := Collect(
			bigint(1),
			test1,
			bigint(1_00000),
			bigint(1_00000),
		)

		shouldEQ(t, tAmount0, bigint(26))
		shouldEQ(t, tAmount1, bigint(89))

		// After Collect
		// pool's liquidity stays same
		// pool's balance decreases
		shouldEQ(t, pool.PoolGetLiquidity(), poolOldLiquidity)
	}
}
